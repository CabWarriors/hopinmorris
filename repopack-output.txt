This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-11-28T10:04:59.419Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
public/
  file.svg
  future_rides_map.html
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    analytics/
      page.tsx
    api/
      auth/
        [...nextauth].ts
      chat/
        route.ts
      rides/
        [rideId]/
          passengers/
            route.ts
        route.ts
    chat/
      page.tsx
    register/
      index.tsx
    rides/
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  assets/
    CO2perDepartment.json
    CO2perTeam.json
    daily_emissions_chart.json
    donut_chart_departments.json
    donut_chart_team.json
    pie_chart_total_co2.json
    weekly_emissions_chart.json
  components/
    charts/
      ComparisonSection.tsx
      PlotlyChart.tsx
    forms/
      LoginForm.tsx
      RegisterForm.tsx
    stationsMap/
      PickupStations.tsx
    ui/
      button.tsx
      card.tsx
      input.tsx
      toast.tsx
      toaster.tsx
    Loader.tsx
    NavBar.tsx
  hooks/
    use-toast.ts
  lib/
    dbConnect.ts
    encryptedPassword.ts
    utils.ts
    validation.ts
  models/
    navigation.ts
    ride.ts
    user.ts
  types/
    index.ts
.eslintrc.json
.gitignore
components.json
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/future_rides_map.html
================
<!DOCTYPE html>
<html>
<head>
    
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
    
        <script>
            L_NO_TOUCH = false;
            L_DISABLE_3D = false;
        </script>
    
    <style>html, body {width: 100%;height: 100%;margin: 0;padding: 0;}</style>
    <style>#map {position:absolute;top:0;bottom:0;right:0;left:0;}</style>
    <script src="https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap-glyphicons.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css"/>
    
            <meta name="viewport" content="width=device-width,
                initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
            <style>
                #map_dcd786eb6121b370fb9c734c59d3e66b {
                    position: relative;
                    width: 100.0%;
                    height: 100.0%;
                    left: 0.0%;
                    top: 0.0%;
                }
                .leaflet-container { font-size: 1rem; }
            </style>
        
</head>
<body>
    
    
            <div class="folium-map" id="map_dcd786eb6121b370fb9c734c59d3e66b" ></div>
        
</body>
<script>
    
    
            var map_dcd786eb6121b370fb9c734c59d3e66b = L.map(
                "map_dcd786eb6121b370fb9c734c59d3e66b",
                {
                    center: [50.8882, 5.9795],
                    crs: L.CRS.EPSG3857,
                    zoom: 12,
                    zoomControl: true,
                    preferCanvas: false,
                }
            );

            

        
    
            var tile_layer_c65a11a4da7b5e61f981f4a0e62af0eb = L.tileLayer(
                "https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png",
                {"attribution": "\u0026copy; \u003ca href=\"https://www.openstreetmap.org/copyright\"\u003eOpenStreetMap\u003c/a\u003e contributors \u0026copy; \u003ca href=\"https://carto.com/attributions\"\u003eCARTO\u003c/a\u003e", "detectRetina": false, "maxNativeZoom": 20, "maxZoom": 20, "minZoom": 0, "noWrap": false, "opacity": 1, "subdomains": "abcd", "tms": false}
            );
        
    
            tile_layer_c65a11a4da7b5e61f981f4a0e62af0eb.addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var marker_079096d6438748c1639e5e4651ffea51 = L.marker(
                [50.77, 6.09],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_6bc83ebe46295be6c331de90915e95cf = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "car", "iconColor": "white", "markerColor": "green", "prefix": "fa"}
            );
            marker_079096d6438748c1639e5e4651ffea51.setIcon(icon_6bc83ebe46295be6c331de90915e95cf);
        
    
        var popup_4fc7de0b70dd64bff7c826512f72c182 = L.popup({"maxWidth": "100%"});

        
            
                var html_26749849e2093e695a95ca685b79017f = $(`<div id="html_26749849e2093e695a95ca685b79017f" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Lucas<br>     <b>Hour:</b> 07:30<br>     <b>Available Seats:</b> 1<br>     <b>CO2 Savings:</b> 1.5 kg<br>     </div>`)[0];
                popup_4fc7de0b70dd64bff7c826512f72c182.setContent(html_26749849e2093e695a95ca685b79017f);
            
        

        marker_079096d6438748c1639e5e4651ffea51.bindPopup(popup_4fc7de0b70dd64bff7c826512f72c182)
        ;

        
    
    
            var marker_825b79310b2ed1c24d1ef94fbd355579 = L.marker(
                [50.89, 5.98],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_47cc55f0fc38b92a0af98ac84bbcb818 = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "car", "iconColor": "white", "markerColor": "green", "prefix": "fa"}
            );
            marker_825b79310b2ed1c24d1ef94fbd355579.setIcon(icon_47cc55f0fc38b92a0af98ac84bbcb818);
        
    
        var popup_5efb80e0b47330432456040b94591f30 = L.popup({"maxWidth": "100%"});

        
            
                var html_25c347c59b78537e4a2bd063175b0cf0 = $(`<div id="html_25c347c59b78537e4a2bd063175b0cf0" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Hadi<br>     <b>Hour:</b> 07:30<br>     <b>Available Seats:</b> 1<br>     <b>CO2 Savings:</b> 1.03 kg<br>     </div>`)[0];
                popup_5efb80e0b47330432456040b94591f30.setContent(html_25c347c59b78537e4a2bd063175b0cf0);
            
        

        marker_825b79310b2ed1c24d1ef94fbd355579.bindPopup(popup_5efb80e0b47330432456040b94591f30)
        ;

        
    
    
            var marker_d37431672f7255ade589aaaf1f6705ce = L.marker(
                [50.9, 5.98],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_1c04bee0bbf67721039fb7d49a2d08c0 = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "car", "iconColor": "white", "markerColor": "green", "prefix": "fa"}
            );
            marker_d37431672f7255ade589aaaf1f6705ce.setIcon(icon_1c04bee0bbf67721039fb7d49a2d08c0);
        
    
        var popup_049248f452990715aff96153678c1db6 = L.popup({"maxWidth": "100%"});

        
            
                var html_773b72e49939847ba05e8616a38edf1f = $(`<div id="html_773b72e49939847ba05e8616a38edf1f" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Gabi<br>     <b>Hour:</b> 07:30<br>     <b>Available Seats:</b> 2<br>     <b>CO2 Savings:</b> 1.16 kg<br>     </div>`)[0];
                popup_049248f452990715aff96153678c1db6.setContent(html_773b72e49939847ba05e8616a38edf1f);
            
        

        marker_d37431672f7255ade589aaaf1f6705ce.bindPopup(popup_049248f452990715aff96153678c1db6)
        ;

        
    
    
            var marker_7636d521969d1a0c495a1e5def2bd48c = L.marker(
                [50.9, 5.97],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_4a495515025aff5e9f73f8c741e8e1bf = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "car", "iconColor": "white", "markerColor": "green", "prefix": "fa"}
            );
            marker_7636d521969d1a0c495a1e5def2bd48c.setIcon(icon_4a495515025aff5e9f73f8c741e8e1bf);
        
    
        var popup_53a26707fa735ac3c065e85f1f9fd57d = L.popup({"maxWidth": "100%"});

        
            
                var html_6c6a4e09378ff4cbfbaa969a4bd7f035 = $(`<div id="html_6c6a4e09378ff4cbfbaa969a4bd7f035" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Stefan<br>     <b>Hour:</b> 08:00<br>     <b>Available Seats:</b> 2<br>     <b>CO2 Savings:</b> 1.22 kg<br>     </div>`)[0];
                popup_53a26707fa735ac3c065e85f1f9fd57d.setContent(html_6c6a4e09378ff4cbfbaa969a4bd7f035);
            
        

        marker_7636d521969d1a0c495a1e5def2bd48c.bindPopup(popup_53a26707fa735ac3c065e85f1f9fd57d)
        ;

        
    
    
            var marker_ba0f21a3b96e737306b3f0d0a1b9e548 = L.marker(
                [50.9, 5.96],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_4c9757e5022d6f3e3d6a1a98ac2fcdec = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "car", "iconColor": "white", "markerColor": "green", "prefix": "fa"}
            );
            marker_ba0f21a3b96e737306b3f0d0a1b9e548.setIcon(icon_4c9757e5022d6f3e3d6a1a98ac2fcdec);
        
    
        var popup_40377b7b3e880201bc5abfbed4e40a2a = L.popup({"maxWidth": "100%"});

        
            
                var html_903b1a82d9eb7f3c7009e73401ed967a = $(`<div id="html_903b1a82d9eb7f3c7009e73401ed967a" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Ali<br>     <b>Hour:</b> 08:00<br>     <b>Available Seats:</b> 1<br>     <b>CO2 Savings:</b> 1.26 kg<br>     </div>`)[0];
                popup_40377b7b3e880201bc5abfbed4e40a2a.setContent(html_903b1a82d9eb7f3c7009e73401ed967a);
            
        

        marker_ba0f21a3b96e737306b3f0d0a1b9e548.bindPopup(popup_40377b7b3e880201bc5abfbed4e40a2a)
        ;

        
    
    
            var marker_ba3a302dfa8f9c8af956c4aca0ac63ce = L.marker(
                [50.89, 6.0],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_4e946ef3d9284a2d211b2f153c095c37 = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "car", "iconColor": "white", "markerColor": "green", "prefix": "fa"}
            );
            marker_ba3a302dfa8f9c8af956c4aca0ac63ce.setIcon(icon_4e946ef3d9284a2d211b2f153c095c37);
        
    
        var popup_224524e49d200123798f863a5be4b8e0 = L.popup({"maxWidth": "100%"});

        
            
                var html_c878d862fe69ec9c13f4abe0e2669631 = $(`<div id="html_c878d862fe69ec9c13f4abe0e2669631" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Roya<br>     <b>Hour:</b> 08:00<br>     <b>Available Seats:</b> 3<br>     <b>CO2 Savings:</b> 0.98 kg<br>     </div>`)[0];
                popup_224524e49d200123798f863a5be4b8e0.setContent(html_c878d862fe69ec9c13f4abe0e2669631);
            
        

        marker_ba3a302dfa8f9c8af956c4aca0ac63ce.bindPopup(popup_224524e49d200123798f863a5be4b8e0)
        ;

        
    
    
            var marker_7d38f921196c77c4b08da8cde3ce079b = L.marker(
                [50.86, 6.01],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_f30c85f1b32bca31c40f6c7e65214210 = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "car", "iconColor": "white", "markerColor": "green", "prefix": "fa"}
            );
            marker_7d38f921196c77c4b08da8cde3ce079b.setIcon(icon_f30c85f1b32bca31c40f6c7e65214210);
        
    
        var popup_2c2d8469855eed9b7a56a91972bb26bb = L.popup({"maxWidth": "100%"});

        
            
                var html_a354b3ff242857f23770c2e9126cfed9 = $(`<div id="html_a354b3ff242857f23770c2e9126cfed9" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Janina<br>     <b>Hour:</b> 08:00<br>     <b>Available Seats:</b> 3<br>     <b>CO2 Savings:</b> 0.38 kg<br>     </div>`)[0];
                popup_2c2d8469855eed9b7a56a91972bb26bb.setContent(html_a354b3ff242857f23770c2e9126cfed9);
            
        

        marker_7d38f921196c77c4b08da8cde3ce079b.bindPopup(popup_2c2d8469855eed9b7a56a91972bb26bb)
        ;

        
    
    
            var marker_e058d5f73cf36d4776d925feb5b37444 = L.marker(
                [50.78, 6.08],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_0391213fd8c516e1cedfe54c22547d1d = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "car", "iconColor": "white", "markerColor": "green", "prefix": "fa"}
            );
            marker_e058d5f73cf36d4776d925feb5b37444.setIcon(icon_0391213fd8c516e1cedfe54c22547d1d);
        
    
        var popup_cd18d1f073cc391669034a13ffa4077a = L.popup({"maxWidth": "100%"});

        
            
                var html_cd29eb083004071dc8a688b5fc876a46 = $(`<div id="html_cd29eb083004071dc8a688b5fc876a46" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Emily<br>     <b>Hour:</b> 08:30<br>     <b>Available Seats:</b> 1<br>     <b>CO2 Savings:</b> 0.7 kg<br>     </div>`)[0];
                popup_cd18d1f073cc391669034a13ffa4077a.setContent(html_cd29eb083004071dc8a688b5fc876a46);
            
        

        marker_e058d5f73cf36d4776d925feb5b37444.bindPopup(popup_cd18d1f073cc391669034a13ffa4077a)
        ;

        
    
    
            var marker_22a00716f79cd205f890c4cc3746e999 = L.marker(
                [50.84, 6.08],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_3ffcc5ce4e7a96e8932a62f2d382e6c2 = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "car", "iconColor": "white", "markerColor": "green", "prefix": "fa"}
            );
            marker_22a00716f79cd205f890c4cc3746e999.setIcon(icon_3ffcc5ce4e7a96e8932a62f2d382e6c2);
        
    
        var popup_10c8d58684a1fb59e478cc3fe712086b = L.popup({"maxWidth": "100%"});

        
            
                var html_9a9ac7bcc844c067c30bec6077f8b192 = $(`<div id="html_9a9ac7bcc844c067c30bec6077f8b192" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Jost<br>     <b>Hour:</b> 08:30<br>     <b>Available Seats:</b> 1<br>     <b>CO2 Savings:</b> 0.68 kg<br>     </div>`)[0];
                popup_10c8d58684a1fb59e478cc3fe712086b.setContent(html_9a9ac7bcc844c067c30bec6077f8b192);
            
        

        marker_22a00716f79cd205f890c4cc3746e999.bindPopup(popup_10c8d58684a1fb59e478cc3fe712086b)
        ;

        
    
    
            var marker_6759acd8c8865f7aa7fe1eeb3fb53327 = L.marker(
                [50.83, 6.08],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_65cf31ccc491c0a412f009dfbb18d65f = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "car", "iconColor": "white", "markerColor": "green", "prefix": "fa"}
            );
            marker_6759acd8c8865f7aa7fe1eeb3fb53327.setIcon(icon_65cf31ccc491c0a412f009dfbb18d65f);
        
    
        var popup_8a5234597527e92065ada32e15a170ad = L.popup({"maxWidth": "100%"});

        
            
                var html_1fdf4b6b0e5d6f7f11462566e10365f8 = $(`<div id="html_1fdf4b6b0e5d6f7f11462566e10365f8" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Muayad<br>     <b>Hour:</b> 08:30<br>     <b>Available Seats:</b> 3<br>     <b>CO2 Savings:</b> 0.7 kg<br>     </div>`)[0];
                popup_8a5234597527e92065ada32e15a170ad.setContent(html_1fdf4b6b0e5d6f7f11462566e10365f8);
            
        

        marker_6759acd8c8865f7aa7fe1eeb3fb53327.bindPopup(popup_8a5234597527e92065ada32e15a170ad)
        ;

        
    
    
            var marker_a4570c23bb78fd02b7d0afc343f0f8b7 = L.marker(
                [50.78, 6.09],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_edcedd0b3e10f7aa2a149c498cfddadf = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "car", "iconColor": "white", "markerColor": "green", "prefix": "fa"}
            );
            marker_a4570c23bb78fd02b7d0afc343f0f8b7.setIcon(icon_edcedd0b3e10f7aa2a149c498cfddadf);
        
    
        var popup_cb27e0b665872703caa74ca4945198ad = L.popup({"maxWidth": "100%"});

        
            
                var html_0f40b8436e3c555e44b88038463632bf = $(`<div id="html_0f40b8436e3c555e44b88038463632bf" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Raùl<br>     <b>Hour:</b> 08:30<br>     <b>Available Seats:</b> 1<br>     <b>CO2 Savings:</b> 1.33 kg<br>     </div>`)[0];
                popup_cb27e0b665872703caa74ca4945198ad.setContent(html_0f40b8436e3c555e44b88038463632bf);
            
        

        marker_a4570c23bb78fd02b7d0afc343f0f8b7.bindPopup(popup_cb27e0b665872703caa74ca4945198ad)
        ;

        
    
    
            var marker_179db199445cad3859ec52f638670dc6 = L.marker(
                [50.84, 6.02],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_373e9f0901f801e07b925fe41425a3d8 = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "industry", "iconColor": "white", "markerColor": "blue", "prefix": "fa"}
            );
            marker_179db199445cad3859ec52f638670dc6.setIcon(icon_373e9f0901f801e07b925fe41425a3d8);
        
    
        var popup_af097ce615dfbaebe0276a60aeae7de9 = L.popup({"maxWidth": "100%"});

        
            
                var html_d0411cb38b5bdf4dd1f80cba4e78fd25 = $(`<div id="html_d0411cb38b5bdf4dd1f80cba4e78fd25" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Lucas<br>     <b>Hour:</b> 17:30<br>     <b>Available Seats:</b> 1<br>     <b>CO2 Savings:</b> 1.5 kg<br>     </div>`)[0];
                popup_af097ce615dfbaebe0276a60aeae7de9.setContent(html_d0411cb38b5bdf4dd1f80cba4e78fd25);
            
        

        marker_179db199445cad3859ec52f638670dc6.bindPopup(popup_af097ce615dfbaebe0276a60aeae7de9)
        ;

        
    
    
            var marker_412f5d93e0c9d8273d4d5876c6aa6f22 = L.marker(
                [50.84, 6.02],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_c28bd64499bf5afa881b20a2b6982e4a = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "industry", "iconColor": "white", "markerColor": "blue", "prefix": "fa"}
            );
            marker_412f5d93e0c9d8273d4d5876c6aa6f22.setIcon(icon_c28bd64499bf5afa881b20a2b6982e4a);
        
    
        var popup_f87558a35069caf052d5420d851a97d3 = L.popup({"maxWidth": "100%"});

        
            
                var html_5926a0701eb1a5e2ade26375497ca6d2 = $(`<div id="html_5926a0701eb1a5e2ade26375497ca6d2" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Hadi<br>     <b>Hour:</b> 17:30<br>     <b>Available Seats:</b> 2<br>     <b>CO2 Savings:</b> 1.03 kg<br>     </div>`)[0];
                popup_f87558a35069caf052d5420d851a97d3.setContent(html_5926a0701eb1a5e2ade26375497ca6d2);
            
        

        marker_412f5d93e0c9d8273d4d5876c6aa6f22.bindPopup(popup_f87558a35069caf052d5420d851a97d3)
        ;

        
    
    
            var marker_a81df70075e60d1f16777840a5d8ecd9 = L.marker(
                [50.84, 6.02],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_8cbfe8f34b27c34da5c57174ebc86f11 = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "industry", "iconColor": "white", "markerColor": "blue", "prefix": "fa"}
            );
            marker_a81df70075e60d1f16777840a5d8ecd9.setIcon(icon_8cbfe8f34b27c34da5c57174ebc86f11);
        
    
        var popup_e10893f85b857968e03f2367cbbc3367 = L.popup({"maxWidth": "100%"});

        
            
                var html_f70e5dfaef8f53e9aa5b8a24650f1f92 = $(`<div id="html_f70e5dfaef8f53e9aa5b8a24650f1f92" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Gabi<br>     <b>Hour:</b> 17:30<br>     <b>Available Seats:</b> 3<br>     <b>CO2 Savings:</b> 1.16 kg<br>     </div>`)[0];
                popup_e10893f85b857968e03f2367cbbc3367.setContent(html_f70e5dfaef8f53e9aa5b8a24650f1f92);
            
        

        marker_a81df70075e60d1f16777840a5d8ecd9.bindPopup(popup_e10893f85b857968e03f2367cbbc3367)
        ;

        
    
    
            var marker_628c5f4c48eec97111384b124b415f09 = L.marker(
                [50.84, 6.02],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_ab78d5f7c70439a48714993da24bc335 = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "industry", "iconColor": "white", "markerColor": "blue", "prefix": "fa"}
            );
            marker_628c5f4c48eec97111384b124b415f09.setIcon(icon_ab78d5f7c70439a48714993da24bc335);
        
    
        var popup_dc130788ba9800d6247dabe90773bd29 = L.popup({"maxWidth": "100%"});

        
            
                var html_172cc691aa4af623ffa3778083180941 = $(`<div id="html_172cc691aa4af623ffa3778083180941" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Stefan<br>     <b>Hour:</b> 17:30<br>     <b>Available Seats:</b> 3<br>     <b>CO2 Savings:</b> 1.22 kg<br>     </div>`)[0];
                popup_dc130788ba9800d6247dabe90773bd29.setContent(html_172cc691aa4af623ffa3778083180941);
            
        

        marker_628c5f4c48eec97111384b124b415f09.bindPopup(popup_dc130788ba9800d6247dabe90773bd29)
        ;

        
    
    
            var marker_d1db9e3b116c72c362c9606afb0eecc6 = L.marker(
                [50.84, 6.02],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_3d7a6ed94ef65e8f9529795df131c20a = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "industry", "iconColor": "white", "markerColor": "blue", "prefix": "fa"}
            );
            marker_d1db9e3b116c72c362c9606afb0eecc6.setIcon(icon_3d7a6ed94ef65e8f9529795df131c20a);
        
    
        var popup_0f6778cbb57e6e418f755ee26a9708f2 = L.popup({"maxWidth": "100%"});

        
            
                var html_b9d5ff18cfc3aaa154249a416bb1f23c = $(`<div id="html_b9d5ff18cfc3aaa154249a416bb1f23c" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Ali<br>     <b>Hour:</b> 17:30<br>     <b>Available Seats:</b> 4<br>     <b>CO2 Savings:</b> 1.26 kg<br>     </div>`)[0];
                popup_0f6778cbb57e6e418f755ee26a9708f2.setContent(html_b9d5ff18cfc3aaa154249a416bb1f23c);
            
        

        marker_d1db9e3b116c72c362c9606afb0eecc6.bindPopup(popup_0f6778cbb57e6e418f755ee26a9708f2)
        ;

        
    
    
            var marker_ddc01c7d7d82de1bc2e1dae7b98b6f30 = L.marker(
                [50.84, 6.02],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_634f8eadbda727c0c459501cb0fe5159 = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "industry", "iconColor": "white", "markerColor": "blue", "prefix": "fa"}
            );
            marker_ddc01c7d7d82de1bc2e1dae7b98b6f30.setIcon(icon_634f8eadbda727c0c459501cb0fe5159);
        
    
        var popup_6e6e49c21539890f3ec27c2ed7ef33a8 = L.popup({"maxWidth": "100%"});

        
            
                var html_a4d089f61b0dce4640e305bd0638ed18 = $(`<div id="html_a4d089f61b0dce4640e305bd0638ed18" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Roya<br>     <b>Hour:</b> 17:30<br>     <b>Available Seats:</b> 2<br>     <b>CO2 Savings:</b> 0.98 kg<br>     </div>`)[0];
                popup_6e6e49c21539890f3ec27c2ed7ef33a8.setContent(html_a4d089f61b0dce4640e305bd0638ed18);
            
        

        marker_ddc01c7d7d82de1bc2e1dae7b98b6f30.bindPopup(popup_6e6e49c21539890f3ec27c2ed7ef33a8)
        ;

        
    
    
            var marker_2f57fcfe7ce5532cf0337c3c26ae0ecd = L.marker(
                [50.84, 6.02],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_d1cecb072727f59c548a73f8a42b459e = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "industry", "iconColor": "white", "markerColor": "blue", "prefix": "fa"}
            );
            marker_2f57fcfe7ce5532cf0337c3c26ae0ecd.setIcon(icon_d1cecb072727f59c548a73f8a42b459e);
        
    
        var popup_d79edcaf0ff382a94b02f84132303bf5 = L.popup({"maxWidth": "100%"});

        
            
                var html_4474cd490d297fb3b70882d2061c4bf3 = $(`<div id="html_4474cd490d297fb3b70882d2061c4bf3" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Janina<br>     <b>Hour:</b> 18:00<br>     <b>Available Seats:</b> 2<br>     <b>CO2 Savings:</b> 0.38 kg<br>     </div>`)[0];
                popup_d79edcaf0ff382a94b02f84132303bf5.setContent(html_4474cd490d297fb3b70882d2061c4bf3);
            
        

        marker_2f57fcfe7ce5532cf0337c3c26ae0ecd.bindPopup(popup_d79edcaf0ff382a94b02f84132303bf5)
        ;

        
    
    
            var marker_8679c7eba065caf3afc51ba086fcb24c = L.marker(
                [50.84, 6.02],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_39bb35013ab469ecf9cf85dd04dbd19c = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "industry", "iconColor": "white", "markerColor": "blue", "prefix": "fa"}
            );
            marker_8679c7eba065caf3afc51ba086fcb24c.setIcon(icon_39bb35013ab469ecf9cf85dd04dbd19c);
        
    
        var popup_b1ac6e0448de7034c011eacf259db7e7 = L.popup({"maxWidth": "100%"});

        
            
                var html_4913c2d874af961e892ca1f66f046d86 = $(`<div id="html_4913c2d874af961e892ca1f66f046d86" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Emily<br>     <b>Hour:</b> 18:00<br>     <b>Available Seats:</b> 2<br>     <b>CO2 Savings:</b> 0.7 kg<br>     </div>`)[0];
                popup_b1ac6e0448de7034c011eacf259db7e7.setContent(html_4913c2d874af961e892ca1f66f046d86);
            
        

        marker_8679c7eba065caf3afc51ba086fcb24c.bindPopup(popup_b1ac6e0448de7034c011eacf259db7e7)
        ;

        
    
    
            var marker_056051e373ffdde8ec8636e0c1b047e4 = L.marker(
                [50.84, 6.02],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_57a85cd687de292cde4c2a3116c1a87f = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "industry", "iconColor": "white", "markerColor": "blue", "prefix": "fa"}
            );
            marker_056051e373ffdde8ec8636e0c1b047e4.setIcon(icon_57a85cd687de292cde4c2a3116c1a87f);
        
    
        var popup_8b0a65a005b1a3839a145d0352e410e7 = L.popup({"maxWidth": "100%"});

        
            
                var html_2db772e95cc30a2b3f740c1abf7779c5 = $(`<div id="html_2db772e95cc30a2b3f740c1abf7779c5" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Jost<br>     <b>Hour:</b> 18:00<br>     <b>Available Seats:</b> 2<br>     <b>CO2 Savings:</b> 0.68 kg<br>     </div>`)[0];
                popup_8b0a65a005b1a3839a145d0352e410e7.setContent(html_2db772e95cc30a2b3f740c1abf7779c5);
            
        

        marker_056051e373ffdde8ec8636e0c1b047e4.bindPopup(popup_8b0a65a005b1a3839a145d0352e410e7)
        ;

        
    
    
            var marker_0b87be3ee4d03b9272bde75dc6626bfd = L.marker(
                [50.84, 6.02],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_e3048d9aa9ac77b37340c006dae78a80 = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "industry", "iconColor": "white", "markerColor": "blue", "prefix": "fa"}
            );
            marker_0b87be3ee4d03b9272bde75dc6626bfd.setIcon(icon_e3048d9aa9ac77b37340c006dae78a80);
        
    
        var popup_2fbaf712f6704821d9c751edfc10c17f = L.popup({"maxWidth": "100%"});

        
            
                var html_962a9cc7dc58133ef8b83d2d86d1a79f = $(`<div id="html_962a9cc7dc58133ef8b83d2d86d1a79f" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Muayad<br>     <b>Hour:</b> 17:00<br>     <b>Available Seats:</b> 2<br>     <b>CO2 Savings:</b> 0.7 kg<br>     </div>`)[0];
                popup_2fbaf712f6704821d9c751edfc10c17f.setContent(html_962a9cc7dc58133ef8b83d2d86d1a79f);
            
        

        marker_0b87be3ee4d03b9272bde75dc6626bfd.bindPopup(popup_2fbaf712f6704821d9c751edfc10c17f)
        ;

        
    
    
            var marker_b653c77166bbfbcacfa5ad91de2e9549 = L.marker(
                [50.84, 6.02],
                {}
            ).addTo(map_dcd786eb6121b370fb9c734c59d3e66b);
        
    
            var icon_c8e30e55694eb8a48c554057ecb4f06d = L.AwesomeMarkers.icon(
                {"extraClasses": "fa-rotate-0", "icon": "industry", "iconColor": "white", "markerColor": "blue", "prefix": "fa"}
            );
            marker_b653c77166bbfbcacfa5ad91de2e9549.setIcon(icon_c8e30e55694eb8a48c554057ecb4f06d);
        
    
        var popup_0200d382b72f9ee3c1cd28e1e50d1f0e = L.popup({"maxWidth": "100%"});

        
            
                var html_7f945606f373f278ce5c19c2964cd81d = $(`<div id="html_7f945606f373f278ce5c19c2964cd81d" style="width: 100.0%; height: 100.0%;">     <b>Driver:</b> Raùl<br>     <b>Hour:</b> 17:00<br>     <b>Available Seats:</b> 2<br>     <b>CO2 Savings:</b> 1.33 kg<br>     </div>`)[0];
                popup_0200d382b72f9ee3c1cd28e1e50d1f0e.setContent(html_7f945606f373f278ce5c19c2964cd81d);
            
        

        marker_b653c77166bbfbcacfa5ad91de2e9549.bindPopup(popup_0200d382b72f9ee3c1cd28e1e50d1f0e)
        ;

        
    
</script>
</html>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/analytics/page.tsx
================
import { Metadata } from "next";
import { promises as fs } from "fs";
import React from "react";
import ridesPlot from "@/assets/rides_plot.png";
import PlotlyChart from "@/components/charts/PlotlyChart";
import PickupStations from "@/components/stationsMap/PickupStations";
import dbConnect from "@/lib/dbConnect";
import user from "@/models/user";
import ComparisonSection from "@/components/charts/ComparisonSection";
import Image from "next/image";

export const metadata: Metadata = {
  title: "Analytics",
};

async function page() {
  // Collect the total emissions saved data
  const totalEmissionsFile = await fs.readFile(
    process.cwd() + "/src/assets/pie_chart_total_co2.json",
    "utf8"
  );
  const totalEmissionsData = JSON.parse(totalEmissionsFile);

  // Collect the team and department data for the rides
  const departmentRideFile = await fs.readFile(
    process.cwd() + "/src/assets/donut_chart_departments.json",
    "utf8"
  );
  const departmenRidetData = JSON.parse(departmentRideFile);

  const teamRideFile = await fs.readFile(
    process.cwd() + "/src/assets/donut_chart_team.json",
    "utf8"
  );
  const teamtRideData = JSON.parse(teamRideFile);

  // Collect the team and department data for co2 emissions
  const departmentCO2File = await fs.readFile(
    process.cwd() + "/src/assets/CO2perDepartment.json",
    "utf8"
  );
  const departmenCO2Data = JSON.parse(departmentCO2File);

  const teamCO2File = await fs.readFile(
    process.cwd() + "/src/assets/CO2perTeam.json",
    "utf8"
  );
  const teamtCO2Data = JSON.parse(teamCO2File);

  // Collect the daily and weekly emissions
  const dailyEmissionsFile = await fs.readFile(
    process.cwd() + "/src/assets/daily_emissions_chart.json",
    "utf8"
  );
  const dailyemissionsData = JSON.parse(dailyEmissionsFile);

  const weeklyEmissionsFile = await fs.readFile(
    process.cwd() + "/src/assets/weekly_emissions_chart.json",
    "utf8"
  );
  const weeklyEmissionsData = JSON.parse(weeklyEmissionsFile);

  return (
    <div className="grid justify-center max-w-3xl mx-auto mt-4">
      <h1 className="font-semibold text-lg text-center">
        Welcome to HopInMorris analytics section. Here you can gain some
        valuable insights about our contribution to reducing CO2 emmisions
        within our team!
      </h1>
      {/* Total emissions saved */}
      <p className="text-center my-5">
        Lets begin with analysing the contribution divided by teams and
        departments:
      </p>
      <PlotlyChart data={totalEmissionsData} />
      {/* Contribution by team */}
      <p className="text-center my-5">
        Lets begin with analysing the contribution divided by teams and
        departments:
      </p>
      <ComparisonSection
        teamPlotData={teamtRideData}
        depPlotData={departmenRidetData}
        label1="Team"
        label2="Department"
      />

      {/* Emission charts */}
      <p className="text-center my-5">
        Lets continue with a breakdown of CO2 emissions saved by each team and
        depertment:
      </p>
      <ComparisonSection
        teamPlotData={teamtCO2Data}
        depPlotData={departmenCO2Data}
        label1="Team"
        label2="Department"
      />

      {/* Daily and weekly emissions  */}
      <p className="text-center my-5">
        Lets continue with a breakdown of daily and weekly emissions saved:
      </p>
      <ComparisonSection
        teamPlotData={dailyemissionsData}
        depPlotData={weeklyEmissionsData}
        label1="Daily"
        label2="Weekly"
      />

      {/* Rides plot */}
      <p className="text-center my-5">
        And lets finish with a breakdown of previous rides divided by pickup
        stations:
      </p>
      <Image src={ridesPlot} alt="rides plot" className="w-[700px]" priority />
    </div>
  );
}

export default page;

================
File: src/app/api/auth/[...nextauth].ts
================
import NextAuth, { RequestInternal } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import bcrypt from "bcrypt";
import dbConnect from "@/lib/dbConnect";
import userModel from "@/models/user";

type Credentials = {
  email: string;
  password: string;
};

export const authOptions = {
  providers: [
    CredentialsProvider({
      name: "credentials",
      credentials: {},
      authorize: async (
        credentials: Record<never, string> | undefined,
        req: Pick<RequestInternal, "body" | "query" | "headers" | "method">
      ) => {
        if (!credentials) {
          return null;
        }

        const { email, password } = credentials as Credentials;
        try {
          await dbConnect();
          const user = await userModel.findOne({ email });

          if (!user) {
            return null;
          }
          const checkedPassword = await bcrypt.compare(password, user.password);

          if (!checkedPassword) {
            return null;
          }
          return user;
        } catch (error) {
          console.log("Error: ", error);
          return null;
        }
      },
    }),
  ],
  session: {
    jwt: true,
    maxAge: 60 * 60 * 24, // 24 hours
    updateAge: 60 * 60, // 1 hour
  },
  secret: process.env.NEXTAUTH_SECRET,
  debug: process.env.NODE_ENV === "development",
  pages: {
    signIn: "/",
  },
};

export default NextAuth(authOptions);

================
File: src/app/api/chat/route.ts
================
// app/api/chat/route.ts
import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  baseURL: process.env.OPENAI_BASE_URL,
})

// Handle POST requests
export async function POST(request: NextRequest) {
  try {
    const { messages } = await request.json()

    const completion = await openai.chat.completions.create({
      model: "grok-beta",
      messages: [
        { 
          role: "system", 
          content: "You are a helpful assistant." 
        },
        ...messages
      ],
    })

    return NextResponse.json({ 
      message: completion.choices[0].message.content 
    })
  } catch (error) {
    console.error('Error:', error)
    return NextResponse.json(
      { error: 'Failed to process request' },
      { status: 500 }
    )
  }
}

// Handle GET requests - useful for checking if API is alive
export async function GET() {
  return NextResponse.json({ status: 'API is running' })
}

================
File: src/app/api/rides/[rideId]/passengers/route.ts
================
import { NextResponse } from 'next/server';
import dbConnect from '@/lib/dbConnect';
import { IUser, ILocation } from '@/types';
import Ride from '@/models/ride';
import { ObjectId } from 'mongodb';

async function handlePassengerUpdate(
  request: Request,
  { params }: { params: { rideId: string } },
  isAdding: boolean
) {
  try {
    await dbConnect();
    // Properly await and access the rideId parameter
    const { rideId } = params;
    const testUserId = '674759bc567b5039ccda0728';

    // Find the original ride first
    const originalRide = await Ride.findById(rideId)
      .populate('passengers')
      .lean();
    
    if (!originalRide) {
      return NextResponse.json(
        { error: 'Ride not found' },
        { status: 404 }
      );
    }

    if (isAdding) {
      // Check seats availability
      if (originalRide.passengers.length >= originalRide.seats) {
        return NextResponse.json(
          { error: 'No seats available' },
          { status: 400 }
        );
      }

      // Check if already a passenger
      if (originalRide.passengers.some(passenger => passenger._id.toString() === testUserId)) {
        return NextResponse.json(
          { error: 'User is already a passenger' },
          { status: 400 }
        );
      }

      // Update passengers using updateOne to avoid validation issues
      await Ride.updateOne(
        { _id: rideId },
        { $push: { passengers: new ObjectId(testUserId) } }
      );
    } else {
      // Remove passenger using updateOne
      await Ride.updateOne(
        { _id: rideId },
        { $pull: { passengers: new ObjectId(testUserId) } }
      );
    }

    // Fetch the updated ride with populated fields
    const updatedRide = await Ride.findById(rideId)
      .populate<{ driver: IUser }>('driver', 'name email')
      .populate<{ passengers: IUser[] }>('passengers', 'name email')
      .populate<{ startLocation: ILocation }>('startLocation', 'LocationName')
      .populate<{ endLocation: ILocation }>('endLocation', 'LocationName')
      .lean();

    // Format the response similarly to the GET route
    const formattedRide = {
      ...updatedRide,
      departureTime: updatedRide.departureTime && updatedRide.departureTime.t
        ? new Date(updatedRide.departureTime.t * 1000)
        : null,
    };

    return NextResponse.json(formattedRide);
  } catch (error) {
    console.error('Error updating passengers:', error);
    return NextResponse.json(
      { error: `Failed to ${isAdding ? 'add' : 'remove'} passenger` },
      { status: 500 }
    );
  }
}

export async function POST(
  request: Request,
  context: { params: { rideId: string } }
) {
  return handlePassengerUpdate(request, context, true);
}

export async function DELETE(
  request: Request,
  context: { params: { rideId: string } }
) {
  return handlePassengerUpdate(request, context, false);
}

================
File: src/app/api/rides/route.ts
================
import { NextResponse } from 'next/server';
import dbConnect from '@/lib/dbConnect';
import { IUser, ILocation } from '@/types';
import Ride from '@/models/ride';

export async function GET() { 
  try {
    await dbConnect();
    
    const rides = await Ride.find()
      // .populate<{ driver: IUser }>('driver', 'name email')
      // .populate<{ passengers: IUser[] }>('passengers', 'name email')
      // .populate<{ startLocation: ILocation }>('startLocation', 'LocationName')
      // .populate<{ endLocation: ILocation }>('endLocation', 'LocationName')
      .lean()
      .exec();

    
    const formattedRides = rides.map((ride) => ({
      ...ride,
      departureTime: ride.departureTime
        ? new Date(ride.departureTime.t * 1000)
        : null,
    }));


    if (!formattedRides) {
      return NextResponse.json({ error: 'No rides found' }, { status: 404 });
    }

    return NextResponse.json(formattedRides);
  } catch (error) {
    console.error('Error fetching rides:', error);
    return NextResponse.json(
      { error: 'Failed to fetch rides' },
      { status: 500 }
    );
  }
}

================
File: src/app/chat/page.tsx
================
'use client'

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card } from "@/components/ui/card"

interface Message {
  role: 'user' | 'assistant'
  content: string
}

export default function Chat() {
  const [input, setInput] = useState('')
  const [messages, setMessages] = useState<Message[]>([])
  const [isLoading, setIsLoading] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!input.trim()) return

    const userMessage = { role: 'user' as const, content: input }
    setMessages(prev => [...prev, userMessage])
    setInput('')
    setIsLoading(true)

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [...messages, userMessage],
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to fetch response')
      }

      const data = await response.json()
      setMessages(prev => [...prev, { role: 'assistant', content: data.message }])
    } catch (error) {
      console.error('Error:', error)
      setMessages(prev => [
        ...prev,
        { role: 'assistant', content: 'Sorry, there was an error processing your request.' },
      ])
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="container mx-auto max-w-2xl p-4">
      <Card className="p-4 mb-4">
        <div className="space-y-4 mb-4 min-h-[200px] max-h-[600px] overflow-y-auto">
          {messages.map((message, index) => (
            <div
              key={index}
              className={`p-2 rounded-lg ${
                message.role === 'user'
                  ? 'bg-blue-100 ml-auto max-w-[80%]'
                  : 'bg-gray-100 mr-auto max-w-[80%]'
              }`}
            >
              {message.content}
            </div>
          ))}
          {isLoading && (
            <div className="bg-gray-100 p-2 rounded-lg mr-auto max-w-[80%]">
              Thinking...
            </div>
          )}
        </div>

        <form onSubmit={handleSubmit} className="flex gap-2">
          <Input
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Type your message..."
            disabled={isLoading}
            className="flex-1 border-gray-300 focus:border-gray-600"
          />
          <Button type="submit" disabled={isLoading}>
            Send
          </Button>
        </form>
      </Card>
    </div>
  )
}

================
File: src/app/register/index.tsx
================
import RegisterForm from "@/components/forms/RegisterForm"



const register = () => {
  return (
    <RegisterForm/>
  )
}

export default register

================
File: src/app/rides/page.tsx
================
'use client';

import { useEffect, useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast"
import { Check } from "lucide-react";
import { formatDateString } from '@/lib/utils';
import { RideWithLocations } from "@/types";
import { cn } from "@/lib/utils";

export default function Rides() {
  const [rides, setRides] = useState<RideWithLocations[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [loadingRideId, setLoadingRideId] = useState<string | null>(null);
  const [changingSeats, setChangingSeats] = useState<Set<string>>(new Set());
  const { toast } = useToast();
  
  // Our test user ID - in a real app, this would come from authentication
  const TEST_USER_ID = '674759bc567b5039ccda0728';

  // Helper function to check if the user has already joined a ride
  const hasUserJoined = (ride: RideWithLocations): boolean => {
    return ride.passengers.some(passenger => passenger._id === TEST_USER_ID);
  };

  // Helper function to get the button state for a ride
const getButtonState = (ride: RideWithLocations) => {
  const isJoined = hasUserJoined(ride);
  const availableSeats = ride.seats - (ride.passengers?.length || 0);
  
  if (availableSeats <= 0 && !isJoined) {
    return {
      text: 'Full',
      variant: 'secondary' as const,
      disabled: true,
      className: 'bg-gray-400 hover:bg-gray-400 cursor-not-allowed'
    };
  }
  
  if (isJoined) {
    return {
      text: 'Leave Ride',
      variant: 'outline' as const,
      disabled: false,
      className: 'hover:bg-red-50 border-red-200 text-red-600 hover:text-red-700 transition-colors duration-200'
    };
  }
  
  return {
    text: 'Join Ride',
    variant: 'default' as const,
    disabled: false,
    className: 'hover:bg-green-50 hover:text-green-600 transition-colors duration-200'
  };
};

  const fetchRides = async () => {
    try {
      const response = await fetch('/api/rides');
      if (!response.ok) {
        throw new Error('Failed to fetch rides');
      }
      const data = await response.json();
      setRides(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load rides');
    }
  };

  useEffect(() => {
    fetchRides();
  }, []);

  const handleJoinOrLeaveRide = async (rideId: string, isJoining: boolean) => {
    if (loadingRideId) return; // Prevent multiple simultaneous requests

    try {
      setLoadingRideId(rideId);
      const response = await fetch(`/api/rides/${rideId}/passengers`, {
        method: isJoining ? 'POST' : 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `Failed to ${isJoining ? 'join' : 'leave'} ride`);
      }

      // Add rideId to changingSeats for animation
      setChangingSeats(prev => new Set(prev).add(rideId));

      // Remove from changingSeats after animation
      setTimeout(() => {
        setChangingSeats(prev => {
          const newSet = new Set(prev);
          newSet.delete(rideId);
          return newSet;
        });
      }, 1000);

      await fetchRides(); // Refresh the rides list
      
      toast({
        title: "Success!",
        description: `You have successfully ${isJoining ? 'joined' : 'left'} the ride.`,
      });
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : `Failed to ${isJoining ? 'join' : 'leave'} ride`;
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setLoadingRideId(null);
    }
  };

  if (error) {
    return <div className="text-red-500">{error}</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-8">Available Rides</h1>

      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {rides.map((ride) => {
          const buttonState = getButtonState(ride);
          const isJoined = hasUserJoined(ride);
          const isLoading = loadingRideId === ride._id;
          const isChangingSeats = changingSeats.has(ride._id);
          
          return (
            <Card
              key={ride._id.toString()}
              className="shadow-lg transition-all duration-300"
            >
              <CardHeader className="relative">
                {isJoined && (
                  <div className="absolute right-4 top-4 text-green-600 bg-green-50 p-1 rounded-full">
                    <Check size={16} />
                  </div>
                )}
                <CardTitle className="text-lg pr-8">
                  {ride.startLocation?.LocationName || 'Loading...'} → {ride.endLocation?.LocationName || 'Loading...'}
                </CardTitle>
                {ride.departureTime && (
                  <p className="text-sm text-muted-foreground">
                    Departure: {ride.departureTime ? formatDateString(ride.departureTime) : "Unknown"}
                  </p>
                )}
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {ride.startLocation?.Address && (
                    <p className="text-sm">
                      <span className="font-semibold">From:</span> {ride.startLocation.Address}
                    </p>
                  )}
                  {ride.endLocation?.Address && (
                    <p className="text-sm">
                      <span className="font-semibold">To:</span> {ride.endLocation.Address}
                    </p>
                  )}
                  <p className="text-sm">
                    <span className="font-semibold">Available Seats: </span>
                    <span>
                      {ride.seats - (ride.passengers?.length || 0)} / {ride.seats}
                    </span>
                  </p>
                  {ride.driver && (
                    <p className="text-sm">
                      <span className="font-semibold">Driver:</span> {ride.driver.name || ride.driver.email}
                    </p>
                  )}
                  
                  <Button
                    className={cn(
                      "w-full mt-4 rounded-md",
                      buttonState.className,
                      isLoading && "opacity-80"
                    )}
                    onClick={() => handleJoinOrLeaveRide(ride._id.toString(), !isJoined)}
                    disabled={buttonState.disabled || isLoading}
                    variant={buttonState.variant}
                  >
                    {isLoading ? 'Processing...' : buttonState.text}
                  </Button>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/app/layout.tsx
================
import "./globals.css";

export const metadata = {
  title: "Next.js",
  description: "Generated by Next.js",
};

import { Inter } from "next/font/google"
import Navbar from "@/components/NavBar"
import "./globals.css"
import { Toaster } from "@/components/ui/toaster";

const inter = Inter({ subsets: ["latin"] })


export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
          <div className="min-h-screen bg-gray-50">
            <Navbar />
            <main className="container mx-auto px-4 py-8">
              {children}
            </main>
              <Toaster />
          </div>
      </body>
    </html>
  );
}

================
File: src/app/page.tsx
================
import LoginForm from "@/components/forms/LoginForm";
import Loader from "@/components/Loader";
import { getServerSession } from "next-auth/next";
// import { authOptions } from "./api/auth/[...nextauth]";

export default async function Home() {
  // const session = await getServerSession(authOptions);

  // if (status === "loading") {
  //   return (
  //     <div className="flex h-screen items-center justify-center">
  //       <Loader />
  //     </div>
  //   );
  // }

  // if (!session) {
  //   return (
  //     <main className="min-h-screen w-screen flex items-center justify-center">
  //       <LoginForm />
  //     </main>
  //   );
  // }

  return (
    <div className="prose max-w-none">
      <h1 className="text-4xl font-bold">Welcome to HopInMorris</h1>
      <p className="text-xl">
        Find your next ride or share your journey with others.
      </p>
      <div
        className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 
    gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]"
      >
        <h1>Hello world!</h1>
      </div>
    </div>
  );
}

================
File: src/assets/CO2perDepartment.json
================
{
  "data": [
    {
      "alignmentgroup": "True",
      "hovertemplate": "Department=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "A",
      "marker": { "color": "#00453D", "pattern": { "shape": "" } },
      "name": "A",
      "offsetgroup": "A",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["A"],
      "xaxis": "x",
      "y": [267.87],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Department=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "E",
      "marker": { "color": "#1F5C46", "pattern": { "shape": "" } },
      "name": "E",
      "offsetgroup": "E",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["E"],
      "xaxis": "x",
      "y": [46.199999999999996],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Department=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "B",
      "marker": { "color": "#387F5A", "pattern": { "shape": "" } },
      "name": "B",
      "offsetgroup": "B",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["B"],
      "xaxis": "x",
      "y": [41.79],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Department=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "D",
      "marker": { "color": "#5A9F6D", "pattern": { "shape": "" } },
      "name": "D",
      "offsetgroup": "D",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["D"],
      "xaxis": "x",
      "y": [37.089999999999996],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Department=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "C",
      "marker": { "color": "#7BBF81", "pattern": { "shape": "" } },
      "name": "C",
      "offsetgroup": "C",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["C"],
      "xaxis": "x",
      "y": [24.11],
      "yaxis": "y",
      "type": "bar"
    }
  ],
  "layout": {
    "template": {
      "data": {
        "histogram2dcontour": [
          {
            "type": "histogram2dcontour",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "choropleth": [
          {
            "type": "choropleth",
            "colorbar": { "outlinewidth": 0, "ticks": "" }
          }
        ],
        "histogram2d": [
          {
            "type": "histogram2d",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "heatmap": [
          {
            "type": "heatmap",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "heatmapgl": [
          {
            "type": "heatmapgl",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "contourcarpet": [
          {
            "type": "contourcarpet",
            "colorbar": { "outlinewidth": 0, "ticks": "" }
          }
        ],
        "contour": [
          {
            "type": "contour",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "surface": [
          {
            "type": "surface",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "mesh3d": [
          { "type": "mesh3d", "colorbar": { "outlinewidth": 0, "ticks": "" } }
        ],
        "scatter": [
          {
            "fillpattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
            },
            "type": "scatter"
          }
        ],
        "parcoords": [
          {
            "type": "parcoords",
            "line": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterpolargl": [
          {
            "type": "scatterpolargl",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "bar": [
          {
            "error_x": { "color": "#2a3f5f" },
            "error_y": { "color": "#2a3f5f" },
            "marker": {
              "line": { "color": "#E5ECF6", "width": 0.5 },
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "bar"
          }
        ],
        "scattergeo": [
          {
            "type": "scattergeo",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterpolar": [
          {
            "type": "scatterpolar",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "histogram": [
          {
            "marker": {
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "histogram"
          }
        ],
        "scattergl": [
          {
            "type": "scattergl",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatter3d": [
          {
            "type": "scatter3d",
            "line": { "colorbar": { "outlinewidth": 0, "ticks": "" } },
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scattermapbox": [
          {
            "type": "scattermapbox",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterternary": [
          {
            "type": "scatterternary",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scattercarpet": [
          {
            "type": "scattercarpet",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "carpet": [
          {
            "aaxis": {
              "endlinecolor": "#2a3f5f",
              "gridcolor": "white",
              "linecolor": "white",
              "minorgridcolor": "white",
              "startlinecolor": "#2a3f5f"
            },
            "baxis": {
              "endlinecolor": "#2a3f5f",
              "gridcolor": "white",
              "linecolor": "white",
              "minorgridcolor": "white",
              "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
          }
        ],
        "table": [
          {
            "cells": {
              "fill": { "color": "#EBF0F8" },
              "line": { "color": "white" }
            },
            "header": {
              "fill": { "color": "#C8D4E3" },
              "line": { "color": "white" }
            },
            "type": "table"
          }
        ],
        "barpolar": [
          {
            "marker": {
              "line": { "color": "#E5ECF6", "width": 0.5 },
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "barpolar"
          }
        ],
        "pie": [{ "automargin": true, "type": "pie" }]
      },
      "layout": {
        "autotypenumbers": "strict",
        "colorway": [
          "#636efa",
          "#EF553B",
          "#00cc96",
          "#ab63fa",
          "#FFA15A",
          "#19d3f3",
          "#FF6692",
          "#B6E880",
          "#FF97FF",
          "#FECB52"
        ],
        "font": { "color": "#2a3f5f" },
        "hovermode": "closest",
        "hoverlabel": { "align": "left" },
        "paper_bgcolor": "white",
        "plot_bgcolor": "#E5ECF6",
        "polar": {
          "bgcolor": "#E5ECF6",
          "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
          },
          "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
          }
        },
        "ternary": {
          "bgcolor": "#E5ECF6",
          "aaxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" },
          "baxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" },
          "caxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" }
        },
        "coloraxis": { "colorbar": { "outlinewidth": 0, "ticks": "" } },
        "colorscale": {
          "sequential": [
            [0.0, "#0d0887"],
            [0.1111111111111111, "#46039f"],
            [0.2222222222222222, "#7201a8"],
            [0.3333333333333333, "#9c179e"],
            [0.4444444444444444, "#bd3786"],
            [0.5555555555555556, "#d8576b"],
            [0.6666666666666666, "#ed7953"],
            [0.7777777777777778, "#fb9f3a"],
            [0.8888888888888888, "#fdca26"],
            [1.0, "#f0f921"]
          ],
          "sequentialminus": [
            [0.0, "#0d0887"],
            [0.1111111111111111, "#46039f"],
            [0.2222222222222222, "#7201a8"],
            [0.3333333333333333, "#9c179e"],
            [0.4444444444444444, "#bd3786"],
            [0.5555555555555556, "#d8576b"],
            [0.6666666666666666, "#ed7953"],
            [0.7777777777777778, "#fb9f3a"],
            [0.8888888888888888, "#fdca26"],
            [1.0, "#f0f921"]
          ],
          "diverging": [
            [0, "#8e0152"],
            [0.1, "#c51b7d"],
            [0.2, "#de77ae"],
            [0.3, "#f1b6da"],
            [0.4, "#fde0ef"],
            [0.5, "#f7f7f7"],
            [0.6, "#e6f5d0"],
            [0.7, "#b8e186"],
            [0.8, "#7fbc41"],
            [0.9, "#4d9221"],
            [1, "#276419"]
          ]
        },
        "xaxis": {
          "gridcolor": "white",
          "linecolor": "white",
          "ticks": "",
          "title": { "standoff": 15 },
          "zerolinecolor": "white",
          "automargin": true,
          "zerolinewidth": 2
        },
        "yaxis": {
          "gridcolor": "white",
          "linecolor": "white",
          "ticks": "",
          "title": { "standoff": 15 },
          "zerolinecolor": "white",
          "automargin": true,
          "zerolinewidth": 2
        },
        "scene": {
          "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          },
          "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          },
          "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          }
        },
        "shapedefaults": { "line": { "color": "#2a3f5f" } },
        "annotationdefaults": {
          "arrowcolor": "#2a3f5f",
          "arrowhead": 0,
          "arrowwidth": 1
        },
        "geo": {
          "bgcolor": "white",
          "landcolor": "#E5ECF6",
          "subunitcolor": "white",
          "showland": true,
          "showlakes": true,
          "lakecolor": "white"
        },
        "title": { "x": 0.05 },
        "mapbox": { "style": "light" }
      }
    },
    "xaxis": {
      "anchor": "y",
      "domain": [0.0, 1.0],
      "title": { "text": "Department" },
      "categoryorder": "array",
      "categoryarray": ["A", "E", "B", "D", "C"]
    },
    "yaxis": {
      "anchor": "x",
      "domain": [0.0, 1.0],
      "title": { "text": "CO2 Emissions Saved (kg)" }
    },
    "legend": { "title": { "text": "Department" }, "tracegroupgap": 0 },
    "title": { "text": "CO2 Emissions Savings per Department" },
    "barmode": "relative",
    "plot_bgcolor": "white",
    "paper_bgcolor": "white",
    "showlegend": false
  }
}

================
File: src/assets/CO2perTeam.json
================
{
  "data": [
    {
      "alignmentgroup": "True",
      "hovertemplate": "Team=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "Beta",
      "marker": { "color": "#003C33", "pattern": { "shape": "" } },
      "name": "Beta",
      "offsetgroup": "Beta",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["Beta"],
      "xaxis": "x",
      "y": [96.24],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Team=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "Delta",
      "marker": { "color": "#00453D", "pattern": { "shape": "" } },
      "name": "Delta",
      "offsetgroup": "Delta",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["Delta"],
      "xaxis": "x",
      "y": [78.39],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Team=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "Alpha",
      "marker": { "color": "#00453D", "pattern": { "shape": "" } },
      "name": "Alpha",
      "offsetgroup": "Alpha",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["Alpha"],
      "xaxis": "x",
      "y": [60.839999999999996],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Team=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "Gamma",
      "marker": { "color": "#1F5C46", "pattern": { "shape": "" } },
      "name": "Gamma",
      "offsetgroup": "Gamma",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["Gamma"],
      "xaxis": "x",
      "y": [47.82],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Team=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "Echo",
      "marker": { "color": "#387F5A", "pattern": { "shape": "" } },
      "name": "Echo",
      "offsetgroup": "Echo",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["Echo"],
      "xaxis": "x",
      "y": [42.91],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Team=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "Foxtrot",
      "marker": { "color": "#5A9F6D", "pattern": { "shape": "" } },
      "name": "Foxtrot",
      "offsetgroup": "Foxtrot",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["Foxtrot"],
      "xaxis": "x",
      "y": [38.61],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Team=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "Charlie",
      "marker": { "color": "#7BBF81", "pattern": { "shape": "" } },
      "name": "Charlie",
      "offsetgroup": "Charlie",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["Charlie"],
      "xaxis": "x",
      "y": [24.11],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Team=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "Bravo",
      "marker": { "color": "#A3D79D", "pattern": { "shape": "" } },
      "name": "Bravo",
      "offsetgroup": "Bravo",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["Bravo"],
      "xaxis": "x",
      "y": [20.549999999999997],
      "yaxis": "y",
      "type": "bar"
    },
    {
      "alignmentgroup": "True",
      "hovertemplate": "Team=%{x}\u003cbr\u003eCO2 Emissions Saved (kg)=%{y}\u003cextra\u003e\u003c\u002fextra\u003e",
      "legendgroup": "Golf",
      "marker": { "color": "#E7F59E", "pattern": { "shape": "" } },
      "name": "Golf",
      "offsetgroup": "Golf",
      "orientation": "v",
      "showlegend": true,
      "textposition": "auto",
      "x": ["Golf"],
      "xaxis": "x",
      "y": [7.59],
      "yaxis": "y",
      "type": "bar"
    }
  ],
  "layout": {
    "template": {
      "data": {
        "histogram2dcontour": [
          {
            "type": "histogram2dcontour",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "choropleth": [
          {
            "type": "choropleth",
            "colorbar": { "outlinewidth": 0, "ticks": "" }
          }
        ],
        "histogram2d": [
          {
            "type": "histogram2d",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "heatmap": [
          {
            "type": "heatmap",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "heatmapgl": [
          {
            "type": "heatmapgl",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "contourcarpet": [
          {
            "type": "contourcarpet",
            "colorbar": { "outlinewidth": 0, "ticks": "" }
          }
        ],
        "contour": [
          {
            "type": "contour",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "surface": [
          {
            "type": "surface",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "mesh3d": [
          { "type": "mesh3d", "colorbar": { "outlinewidth": 0, "ticks": "" } }
        ],
        "scatter": [
          {
            "fillpattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
            },
            "type": "scatter"
          }
        ],
        "parcoords": [
          {
            "type": "parcoords",
            "line": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterpolargl": [
          {
            "type": "scatterpolargl",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "bar": [
          {
            "error_x": { "color": "#2a3f5f" },
            "error_y": { "color": "#2a3f5f" },
            "marker": {
              "line": { "color": "#E5ECF6", "width": 0.5 },
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "bar"
          }
        ],
        "scattergeo": [
          {
            "type": "scattergeo",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterpolar": [
          {
            "type": "scatterpolar",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "histogram": [
          {
            "marker": {
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "histogram"
          }
        ],
        "scattergl": [
          {
            "type": "scattergl",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatter3d": [
          {
            "type": "scatter3d",
            "line": { "colorbar": { "outlinewidth": 0, "ticks": "" } },
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scattermapbox": [
          {
            "type": "scattermapbox",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterternary": [
          {
            "type": "scatterternary",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scattercarpet": [
          {
            "type": "scattercarpet",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "carpet": [
          {
            "aaxis": {
              "endlinecolor": "#2a3f5f",
              "gridcolor": "white",
              "linecolor": "white",
              "minorgridcolor": "white",
              "startlinecolor": "#2a3f5f"
            },
            "baxis": {
              "endlinecolor": "#2a3f5f",
              "gridcolor": "white",
              "linecolor": "white",
              "minorgridcolor": "white",
              "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
          }
        ],
        "table": [
          {
            "cells": {
              "fill": { "color": "#EBF0F8" },
              "line": { "color": "white" }
            },
            "header": {
              "fill": { "color": "#C8D4E3" },
              "line": { "color": "white" }
            },
            "type": "table"
          }
        ],
        "barpolar": [
          {
            "marker": {
              "line": { "color": "#E5ECF6", "width": 0.5 },
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "barpolar"
          }
        ],
        "pie": [{ "automargin": true, "type": "pie" }]
      },
      "layout": {
        "autotypenumbers": "strict",
        "colorway": [
          "#636efa",
          "#EF553B",
          "#00cc96",
          "#ab63fa",
          "#FFA15A",
          "#19d3f3",
          "#FF6692",
          "#B6E880",
          "#FF97FF",
          "#FECB52"
        ],
        "font": { "color": "#2a3f5f" },
        "hovermode": "closest",
        "hoverlabel": { "align": "left" },
        "paper_bgcolor": "white",
        "plot_bgcolor": "#E5ECF6",
        "polar": {
          "bgcolor": "#E5ECF6",
          "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
          },
          "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
          }
        },
        "ternary": {
          "bgcolor": "#E5ECF6",
          "aaxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" },
          "baxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" },
          "caxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" }
        },
        "coloraxis": { "colorbar": { "outlinewidth": 0, "ticks": "" } },
        "colorscale": {
          "sequential": [
            [0.0, "#0d0887"],
            [0.1111111111111111, "#46039f"],
            [0.2222222222222222, "#7201a8"],
            [0.3333333333333333, "#9c179e"],
            [0.4444444444444444, "#bd3786"],
            [0.5555555555555556, "#d8576b"],
            [0.6666666666666666, "#ed7953"],
            [0.7777777777777778, "#fb9f3a"],
            [0.8888888888888888, "#fdca26"],
            [1.0, "#f0f921"]
          ],
          "sequentialminus": [
            [0.0, "#0d0887"],
            [0.1111111111111111, "#46039f"],
            [0.2222222222222222, "#7201a8"],
            [0.3333333333333333, "#9c179e"],
            [0.4444444444444444, "#bd3786"],
            [0.5555555555555556, "#d8576b"],
            [0.6666666666666666, "#ed7953"],
            [0.7777777777777778, "#fb9f3a"],
            [0.8888888888888888, "#fdca26"],
            [1.0, "#f0f921"]
          ],
          "diverging": [
            [0, "#8e0152"],
            [0.1, "#c51b7d"],
            [0.2, "#de77ae"],
            [0.3, "#f1b6da"],
            [0.4, "#fde0ef"],
            [0.5, "#f7f7f7"],
            [0.6, "#e6f5d0"],
            [0.7, "#b8e186"],
            [0.8, "#7fbc41"],
            [0.9, "#4d9221"],
            [1, "#276419"]
          ]
        },
        "xaxis": {
          "gridcolor": "white",
          "linecolor": "white",
          "ticks": "",
          "title": { "standoff": 15 },
          "zerolinecolor": "white",
          "automargin": true,
          "zerolinewidth": 2
        },
        "yaxis": {
          "gridcolor": "white",
          "linecolor": "white",
          "ticks": "",
          "title": { "standoff": 15 },
          "zerolinecolor": "white",
          "automargin": true,
          "zerolinewidth": 2
        },
        "scene": {
          "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          },
          "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          },
          "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          }
        },
        "shapedefaults": { "line": { "color": "#2a3f5f" } },
        "annotationdefaults": {
          "arrowcolor": "#2a3f5f",
          "arrowhead": 0,
          "arrowwidth": 1
        },
        "geo": {
          "bgcolor": "white",
          "landcolor": "#E5ECF6",
          "subunitcolor": "white",
          "showland": true,
          "showlakes": true,
          "lakecolor": "white"
        },
        "title": { "x": 0.05 },
        "mapbox": { "style": "light" }
      }
    },
    "xaxis": {
      "anchor": "y",
      "domain": [0.0, 1.0],
      "title": { "text": "Team" },
      "categoryorder": "array",
      "categoryarray": [
        "Beta",
        "Delta",
        "Alpha",
        "Gamma",
        "Echo",
        "Foxtrot",
        "Charlie",
        "Bravo",
        "Golf"
      ]
    },
    "yaxis": {
      "anchor": "x",
      "domain": [0.0, 1.0],
      "title": { "text": "CO2 Emissions Saved (kg)" }
    },
    "legend": { "title": { "text": "Team" }, "tracegroupgap": 0 },
    "title": { "text": "CO2 Emissions Savings per Team" },
    "barmode": "relative",
    "plot_bgcolor": "white",
    "paper_bgcolor": "white",
    "showlegend": false
  }
}

================
File: src/assets/daily_emissions_chart.json
================
{"data":[{"hovertemplate":"Date=%{x}<br>Total Emissions Saved (kg)=%{y}<extra></extra>","legendgroup":"","line":{"color":"#00453D","dash":"solid","shape":"linear","width":4},"marker":{"symbol":"circle"},"mode":"lines","name":"","orientation":"v","showlegend":false,"x":["2024-08-01","2024-08-02","2024-08-05","2024-08-06","2024-08-07","2024-08-08","2024-08-09","2024-08-12","2024-08-13","2024-08-14","2024-08-15","2024-08-16","2024-08-19","2024-08-20","2024-08-21","2024-08-22","2024-08-23","2024-08-26","2024-08-27","2024-08-28","2024-08-29","2024-08-30","2024-09-02","2024-09-03","2024-09-04","2024-09-05","2024-09-06","2024-09-09","2024-09-10","2024-09-11","2024-09-12","2024-09-13","2024-09-16","2024-09-17","2024-09-18","2024-09-19","2024-09-20","2024-09-23","2024-09-24","2024-09-25","2024-09-26","2024-09-27","2024-09-30","2024-10-01","2024-10-02","2024-10-03","2024-10-04","2024-10-07","2024-10-08","2024-10-09","2024-10-10","2024-10-11","2024-10-14","2024-10-15","2024-10-16","2024-10-17","2024-10-18","2024-10-21","2024-10-22","2024-10-23","2024-10-24","2024-10-25","2024-10-28","2024-10-29","2024-10-30","2024-10-31","2024-11-01","2024-11-04","2024-11-05","2024-11-06","2024-11-07","2024-11-08","2024-11-11","2024-11-12","2024-11-13","2024-11-14","2024-11-15","2024-11-18","2024-11-19","2024-11-20","2024-11-21","2024-11-22","2024-11-25","2024-11-26","2024-11-27","2024-11-28"],"xaxis":"x","y":[7.6499999999999995,4.92,5.93,8.69,4.25,5.51,3.9099999999999997,2.06,2.76,7.01,5.51,5.1,7.49,6.959999999999999,7.319999999999999,3.37,4.07,5.03,3.3,6.1899999999999995,6.109999999999999,7.0,3.0,4.11,4.07,7.4,3.23,5.8999999999999995,4.88,4.06,5.0,4.35,7.1499999999999995,6.09,2.42,2.12,5.99,3.04,3.58,6.449999999999999,3.4699999999999998,2.58,3.33,5.04,6.449999999999999,3.6799999999999997,2.8600000000000003,5.3100000000000005,4.35,4.99,3.7199999999999998,4.18,3.2199999999999998,5.22,5.069999999999999,4.55,3.2199999999999998,2.06,5.04,3.1899999999999995,1.8599999999999999,2.5599999999999996,2.41,2.42,4.84,4.96,7.47,4.65,5.9799999999999995,7.49,6.42,4.09,7.539999999999999,8.11,10.53,4.55,6.92,4.890000000000001,4.72,3.26,3.5,3.12,4.24,6.92,5.39,3.71],"yaxis":"y","type":"scatter"}],"layout":{"template":{"data":{"barpolar":[{"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"contour"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmapgl"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmap"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2dcontour"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2d"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"geo":{"bgcolor":"white","lakecolor":"white","landcolor":"white","showlakes":true,"showland":true,"subunitcolor":"#C8D4E3"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"light"},"paper_bgcolor":"white","plot_bgcolor":"white","polar":{"angularaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""},"bgcolor":"white","radialaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"yaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"zaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"ternary":{"aaxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"baxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"bgcolor":"white","caxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""}},"title":{"x":0.05},"xaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2}}},"xaxis":{"anchor":"y","domain":[0.0,1.0],"title":{"text":""},"showgrid":false,"tickangle":45},"yaxis":{"anchor":"x","domain":[0.0,1.0],"title":{"text":"Total Emissions Saved (kg)"},"showgrid":false},"legend":{"tracegroupgap":0},"title":{"text":"Daily Emissions Saved","x":0.5},"plot_bgcolor":"white","paper_bgcolor":"white"}}

================
File: src/assets/donut_chart_departments.json
================
{
  "data": [
    {
      "hole": 0.3,
      "labels": [
        "Logistics",
        "Operations",
        "Sales",
        "Management",
        "Accounting"
      ],
      "marker": {
        "colors": ["#00453d", "#3a7155", "#749d6e", "#aeca86", "#e7f59e"]
      },
      "textfont": { "size": 9 },
      "textinfo": "label+percent",
      "texttemplate": "%{label}\u003cbr\u003e%{percent:.0%}",
      "values": [130, 20, 20, 18, 10],
      "type": "pie"
    }
  ],
  "layout": {
    "template": {
      "data": {
        "histogram2dcontour": [
          {
            "type": "histogram2dcontour",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "choropleth": [
          {
            "type": "choropleth",
            "colorbar": { "outlinewidth": 0, "ticks": "" }
          }
        ],
        "histogram2d": [
          {
            "type": "histogram2d",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "heatmap": [
          {
            "type": "heatmap",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "heatmapgl": [
          {
            "type": "heatmapgl",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "contourcarpet": [
          {
            "type": "contourcarpet",
            "colorbar": { "outlinewidth": 0, "ticks": "" }
          }
        ],
        "contour": [
          {
            "type": "contour",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "surface": [
          {
            "type": "surface",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "mesh3d": [
          { "type": "mesh3d", "colorbar": { "outlinewidth": 0, "ticks": "" } }
        ],
        "scatter": [
          {
            "fillpattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
            },
            "type": "scatter"
          }
        ],
        "parcoords": [
          {
            "type": "parcoords",
            "line": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterpolargl": [
          {
            "type": "scatterpolargl",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "bar": [
          {
            "error_x": { "color": "#2a3f5f" },
            "error_y": { "color": "#2a3f5f" },
            "marker": {
              "line": { "color": "#E5ECF6", "width": 0.5 },
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "bar"
          }
        ],
        "scattergeo": [
          {
            "type": "scattergeo",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterpolar": [
          {
            "type": "scatterpolar",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "histogram": [
          {
            "marker": {
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "histogram"
          }
        ],
        "scattergl": [
          {
            "type": "scattergl",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatter3d": [
          {
            "type": "scatter3d",
            "line": { "colorbar": { "outlinewidth": 0, "ticks": "" } },
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scattermapbox": [
          {
            "type": "scattermapbox",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterternary": [
          {
            "type": "scatterternary",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scattercarpet": [
          {
            "type": "scattercarpet",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "carpet": [
          {
            "aaxis": {
              "endlinecolor": "#2a3f5f",
              "gridcolor": "white",
              "linecolor": "white",
              "minorgridcolor": "white",
              "startlinecolor": "#2a3f5f"
            },
            "baxis": {
              "endlinecolor": "#2a3f5f",
              "gridcolor": "white",
              "linecolor": "white",
              "minorgridcolor": "white",
              "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
          }
        ],
        "table": [
          {
            "cells": {
              "fill": { "color": "#EBF0F8" },
              "line": { "color": "white" }
            },
            "header": {
              "fill": { "color": "#C8D4E3" },
              "line": { "color": "white" }
            },
            "type": "table"
          }
        ],
        "barpolar": [
          {
            "marker": {
              "line": { "color": "#E5ECF6", "width": 0.5 },
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "barpolar"
          }
        ],
        "pie": [{ "automargin": true, "type": "pie" }]
      },
      "layout": {
        "autotypenumbers": "strict",
        "colorway": [
          "#636efa",
          "#EF553B",
          "#00cc96",
          "#ab63fa",
          "#FFA15A",
          "#19d3f3",
          "#FF6692",
          "#B6E880",
          "#FF97FF",
          "#FECB52"
        ],
        "font": { "color": "#2a3f5f" },
        "hovermode": "closest",
        "hoverlabel": { "align": "left" },
        "paper_bgcolor": "white",
        "plot_bgcolor": "#E5ECF6",
        "polar": {
          "bgcolor": "#E5ECF6",
          "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
          },
          "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
          }
        },
        "ternary": {
          "bgcolor": "#E5ECF6",
          "aaxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" },
          "baxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" },
          "caxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" }
        },
        "coloraxis": { "colorbar": { "outlinewidth": 0, "ticks": "" } },
        "colorscale": {
          "sequential": [
            [0.0, "#0d0887"],
            [0.1111111111111111, "#46039f"],
            [0.2222222222222222, "#7201a8"],
            [0.3333333333333333, "#9c179e"],
            [0.4444444444444444, "#bd3786"],
            [0.5555555555555556, "#d8576b"],
            [0.6666666666666666, "#ed7953"],
            [0.7777777777777778, "#fb9f3a"],
            [0.8888888888888888, "#fdca26"],
            [1.0, "#f0f921"]
          ],
          "sequentialminus": [
            [0.0, "#0d0887"],
            [0.1111111111111111, "#46039f"],
            [0.2222222222222222, "#7201a8"],
            [0.3333333333333333, "#9c179e"],
            [0.4444444444444444, "#bd3786"],
            [0.5555555555555556, "#d8576b"],
            [0.6666666666666666, "#ed7953"],
            [0.7777777777777778, "#fb9f3a"],
            [0.8888888888888888, "#fdca26"],
            [1.0, "#f0f921"]
          ],
          "diverging": [
            [0, "#8e0152"],
            [0.1, "#c51b7d"],
            [0.2, "#de77ae"],
            [0.3, "#f1b6da"],
            [0.4, "#fde0ef"],
            [0.5, "#f7f7f7"],
            [0.6, "#e6f5d0"],
            [0.7, "#b8e186"],
            [0.8, "#7fbc41"],
            [0.9, "#4d9221"],
            [1, "#276419"]
          ]
        },
        "xaxis": {
          "gridcolor": "white",
          "linecolor": "white",
          "ticks": "",
          "title": { "standoff": 15 },
          "zerolinecolor": "white",
          "automargin": true,
          "zerolinewidth": 2
        },
        "yaxis": {
          "gridcolor": "white",
          "linecolor": "white",
          "ticks": "",
          "title": { "standoff": 15 },
          "zerolinecolor": "white",
          "automargin": true,
          "zerolinewidth": 2
        },
        "scene": {
          "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          },
          "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          },
          "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          }
        },
        "shapedefaults": { "line": { "color": "#2a3f5f" } },
        "annotationdefaults": {
          "arrowcolor": "#2a3f5f",
          "arrowhead": 0,
          "arrowwidth": 1
        },
        "geo": {
          "bgcolor": "white",
          "landcolor": "#E5ECF6",
          "subunitcolor": "white",
          "showland": true,
          "showlakes": true,
          "lakecolor": "white"
        },
        "title": { "x": 0.05 },
        "mapbox": { "style": "light" }
      }
    },
    "title": {
      "font": { "size": 24 },
      "text": "Users by Department",
      "x": 0.5,
      "y": 0.9
    },
    "showlegend": false
  }
}

================
File: src/assets/donut_chart_team.json
================
{
  "data": [
    {
      "hole": 0.3,
      "hovertemplate": "%{label}\u003cbr\u003eCount of users: %{value}\u003cextra\u003e\u003c\u002fextra\u003e\u003cbr\u003e%{percent:.0%}",
      "labels": [
        "Delta",
        "Alpha",
        "Beta",
        "Gamma",
        "Echo",
        "Bravo",
        "Charlie",
        "Foxtrot",
        "Golf"
      ],
      "marker": {
        "colors": [
          "#00453d",
          "#1d5b49",
          "#3a7155",
          "#578762",
          "#749d6e",
          "#91b37a",
          "#aeca86",
          "#cbe092",
          "#e7f59e"
        ]
      },
      "textinfo": "label",
      "values": [42, 33, 33, 32, 20, 10, 10, 10, 8],
      "type": "pie"
    }
  ],
  "layout": {
    "template": {
      "data": {
        "histogram2dcontour": [
          {
            "type": "histogram2dcontour",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "choropleth": [
          {
            "type": "choropleth",
            "colorbar": { "outlinewidth": 0, "ticks": "" }
          }
        ],
        "histogram2d": [
          {
            "type": "histogram2d",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "heatmap": [
          {
            "type": "heatmap",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "heatmapgl": [
          {
            "type": "heatmapgl",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "contourcarpet": [
          {
            "type": "contourcarpet",
            "colorbar": { "outlinewidth": 0, "ticks": "" }
          }
        ],
        "contour": [
          {
            "type": "contour",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "surface": [
          {
            "type": "surface",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "mesh3d": [
          { "type": "mesh3d", "colorbar": { "outlinewidth": 0, "ticks": "" } }
        ],
        "scatter": [
          {
            "fillpattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
            },
            "type": "scatter"
          }
        ],
        "parcoords": [
          {
            "type": "parcoords",
            "line": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterpolargl": [
          {
            "type": "scatterpolargl",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "bar": [
          {
            "error_x": { "color": "#2a3f5f" },
            "error_y": { "color": "#2a3f5f" },
            "marker": {
              "line": { "color": "#E5ECF6", "width": 0.5 },
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "bar"
          }
        ],
        "scattergeo": [
          {
            "type": "scattergeo",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterpolar": [
          {
            "type": "scatterpolar",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "histogram": [
          {
            "marker": {
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "histogram"
          }
        ],
        "scattergl": [
          {
            "type": "scattergl",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatter3d": [
          {
            "type": "scatter3d",
            "line": { "colorbar": { "outlinewidth": 0, "ticks": "" } },
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scattermapbox": [
          {
            "type": "scattermapbox",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterternary": [
          {
            "type": "scatterternary",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scattercarpet": [
          {
            "type": "scattercarpet",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "carpet": [
          {
            "aaxis": {
              "endlinecolor": "#2a3f5f",
              "gridcolor": "white",
              "linecolor": "white",
              "minorgridcolor": "white",
              "startlinecolor": "#2a3f5f"
            },
            "baxis": {
              "endlinecolor": "#2a3f5f",
              "gridcolor": "white",
              "linecolor": "white",
              "minorgridcolor": "white",
              "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
          }
        ],
        "table": [
          {
            "cells": {
              "fill": { "color": "#EBF0F8" },
              "line": { "color": "white" }
            },
            "header": {
              "fill": { "color": "#C8D4E3" },
              "line": { "color": "white" }
            },
            "type": "table"
          }
        ],
        "barpolar": [
          {
            "marker": {
              "line": { "color": "#E5ECF6", "width": 0.5 },
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "barpolar"
          }
        ],
        "pie": [{ "automargin": true, "type": "pie" }]
      },
      "layout": {
        "autotypenumbers": "strict",
        "colorway": [
          "#636efa",
          "#EF553B",
          "#00cc96",
          "#ab63fa",
          "#FFA15A",
          "#19d3f3",
          "#FF6692",
          "#B6E880",
          "#FF97FF",
          "#FECB52"
        ],
        "font": { "color": "#2a3f5f" },
        "hovermode": "closest",
        "hoverlabel": { "align": "left" },
        "paper_bgcolor": "white",
        "plot_bgcolor": "#E5ECF6",
        "polar": {
          "bgcolor": "#E5ECF6",
          "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
          },
          "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
          }
        },
        "ternary": {
          "bgcolor": "#E5ECF6",
          "aaxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" },
          "baxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" },
          "caxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" }
        },
        "coloraxis": { "colorbar": { "outlinewidth": 0, "ticks": "" } },
        "colorscale": {
          "sequential": [
            [0.0, "#0d0887"],
            [0.1111111111111111, "#46039f"],
            [0.2222222222222222, "#7201a8"],
            [0.3333333333333333, "#9c179e"],
            [0.4444444444444444, "#bd3786"],
            [0.5555555555555556, "#d8576b"],
            [0.6666666666666666, "#ed7953"],
            [0.7777777777777778, "#fb9f3a"],
            [0.8888888888888888, "#fdca26"],
            [1.0, "#f0f921"]
          ],
          "sequentialminus": [
            [0.0, "#0d0887"],
            [0.1111111111111111, "#46039f"],
            [0.2222222222222222, "#7201a8"],
            [0.3333333333333333, "#9c179e"],
            [0.4444444444444444, "#bd3786"],
            [0.5555555555555556, "#d8576b"],
            [0.6666666666666666, "#ed7953"],
            [0.7777777777777778, "#fb9f3a"],
            [0.8888888888888888, "#fdca26"],
            [1.0, "#f0f921"]
          ],
          "diverging": [
            [0, "#8e0152"],
            [0.1, "#c51b7d"],
            [0.2, "#de77ae"],
            [0.3, "#f1b6da"],
            [0.4, "#fde0ef"],
            [0.5, "#f7f7f7"],
            [0.6, "#e6f5d0"],
            [0.7, "#b8e186"],
            [0.8, "#7fbc41"],
            [0.9, "#4d9221"],
            [1, "#276419"]
          ]
        },
        "xaxis": {
          "gridcolor": "white",
          "linecolor": "white",
          "ticks": "",
          "title": { "standoff": 15 },
          "zerolinecolor": "white",
          "automargin": true,
          "zerolinewidth": 2
        },
        "yaxis": {
          "gridcolor": "white",
          "linecolor": "white",
          "ticks": "",
          "title": { "standoff": 15 },
          "zerolinecolor": "white",
          "automargin": true,
          "zerolinewidth": 2
        },
        "scene": {
          "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          },
          "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          },
          "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          }
        },
        "shapedefaults": { "line": { "color": "#2a3f5f" } },
        "annotationdefaults": {
          "arrowcolor": "#2a3f5f",
          "arrowhead": 0,
          "arrowwidth": 1
        },
        "geo": {
          "bgcolor": "white",
          "landcolor": "#E5ECF6",
          "subunitcolor": "white",
          "showland": true,
          "showlakes": true,
          "lakecolor": "white"
        },
        "title": { "x": 0.05 },
        "mapbox": { "style": "light" }
      }
    },
    "title": {
      "font": { "size": 24 },
      "text": "Users by Team",
      "x": 0.475,
      "y": 0.9
    },
    "showlegend": false
  }
}

================
File: src/assets/pie_chart_total_co2.json
================
{
  "data": [
    {
      "hoverinfo": "label+value",
      "labels": ["Total CO2 Saved"],
      "marker": { "colors": ["#00453D"] },
      "textfont": { "size": 12 },
      "textinfo": "label+value",
      "texttemplate": "<b>%{label}</b><br><br><br><br><span style='font-size: 60px;'>%{value:.0f}kg</span>",
      "values": [417.06],
      "type": "pie"
    }
  ],
  "layout": {
    "template": {
      "data": {
        "histogram2dcontour": [
          {
            "type": "histogram2dcontour",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "choropleth": [
          {
            "type": "choropleth",
            "colorbar": { "outlinewidth": 0, "ticks": "" }
          }
        ],
        "histogram2d": [
          {
            "type": "histogram2d",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "heatmap": [
          {
            "type": "heatmap",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "heatmapgl": [
          {
            "type": "heatmapgl",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "contourcarpet": [
          {
            "type": "contourcarpet",
            "colorbar": { "outlinewidth": 0, "ticks": "" }
          }
        ],
        "contour": [
          {
            "type": "contour",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "surface": [
          {
            "type": "surface",
            "colorbar": { "outlinewidth": 0, "ticks": "" },
            "colorscale": [
              [0.0, "#0d0887"],
              [0.1111111111111111, "#46039f"],
              [0.2222222222222222, "#7201a8"],
              [0.3333333333333333, "#9c179e"],
              [0.4444444444444444, "#bd3786"],
              [0.5555555555555556, "#d8576b"],
              [0.6666666666666666, "#ed7953"],
              [0.7777777777777778, "#fb9f3a"],
              [0.8888888888888888, "#fdca26"],
              [1.0, "#f0f921"]
            ]
          }
        ],
        "mesh3d": [
          { "type": "mesh3d", "colorbar": { "outlinewidth": 0, "ticks": "" } }
        ],
        "scatter": [
          {
            "fillpattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
            },
            "type": "scatter"
          }
        ],
        "parcoords": [
          {
            "type": "parcoords",
            "line": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterpolargl": [
          {
            "type": "scatterpolargl",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "bar": [
          {
            "error_x": { "color": "#2a3f5f" },
            "error_y": { "color": "#2a3f5f" },
            "marker": {
              "line": { "color": "#E5ECF6", "width": 0.5 },
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "bar"
          }
        ],
        "scattergeo": [
          {
            "type": "scattergeo",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterpolar": [
          {
            "type": "scatterpolar",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "histogram": [
          {
            "marker": {
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "histogram"
          }
        ],
        "scattergl": [
          {
            "type": "scattergl",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatter3d": [
          {
            "type": "scatter3d",
            "line": { "colorbar": { "outlinewidth": 0, "ticks": "" } },
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scattermapbox": [
          {
            "type": "scattermapbox",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scatterternary": [
          {
            "type": "scatterternary",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "scattercarpet": [
          {
            "type": "scattercarpet",
            "marker": { "colorbar": { "outlinewidth": 0, "ticks": "" } }
          }
        ],
        "carpet": [
          {
            "aaxis": {
              "endlinecolor": "#2a3f5f",
              "gridcolor": "white",
              "linecolor": "white",
              "minorgridcolor": "white",
              "startlinecolor": "#2a3f5f"
            },
            "baxis": {
              "endlinecolor": "#2a3f5f",
              "gridcolor": "white",
              "linecolor": "white",
              "minorgridcolor": "white",
              "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
          }
        ],
        "table": [
          {
            "cells": {
              "fill": { "color": "#EBF0F8" },
              "line": { "color": "white" }
            },
            "header": {
              "fill": { "color": "#C8D4E3" },
              "line": { "color": "white" }
            },
            "type": "table"
          }
        ],
        "barpolar": [
          {
            "marker": {
              "line": { "color": "#E5ECF6", "width": 0.5 },
              "pattern": { "fillmode": "overlay", "size": 10, "solidity": 0.2 }
            },
            "type": "barpolar"
          }
        ],
        "pie": [{ "automargin": true, "type": "pie" }]
      },
      "layout": {
        "autotypenumbers": "strict",
        "colorway": [
          "#636efa",
          "#EF553B",
          "#00cc96",
          "#ab63fa",
          "#FFA15A",
          "#19d3f3",
          "#FF6692",
          "#B6E880",
          "#FF97FF",
          "#FECB52"
        ],
        "font": { "color": "#2a3f5f" },
        "hovermode": "closest",
        "hoverlabel": { "align": "left" },
        "paper_bgcolor": "white",
        "plot_bgcolor": "#E5ECF6",
        "polar": {
          "bgcolor": "#E5ECF6",
          "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
          },
          "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
          }
        },
        "ternary": {
          "bgcolor": "#E5ECF6",
          "aaxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" },
          "baxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" },
          "caxis": { "gridcolor": "white", "linecolor": "white", "ticks": "" }
        },
        "coloraxis": { "colorbar": { "outlinewidth": 0, "ticks": "" } },
        "colorscale": {
          "sequential": [
            [0.0, "#0d0887"],
            [0.1111111111111111, "#46039f"],
            [0.2222222222222222, "#7201a8"],
            [0.3333333333333333, "#9c179e"],
            [0.4444444444444444, "#bd3786"],
            [0.5555555555555556, "#d8576b"],
            [0.6666666666666666, "#ed7953"],
            [0.7777777777777778, "#fb9f3a"],
            [0.8888888888888888, "#fdca26"],
            [1.0, "#f0f921"]
          ],
          "sequentialminus": [
            [0.0, "#0d0887"],
            [0.1111111111111111, "#46039f"],
            [0.2222222222222222, "#7201a8"],
            [0.3333333333333333, "#9c179e"],
            [0.4444444444444444, "#bd3786"],
            [0.5555555555555556, "#d8576b"],
            [0.6666666666666666, "#ed7953"],
            [0.7777777777777778, "#fb9f3a"],
            [0.8888888888888888, "#fdca26"],
            [1.0, "#f0f921"]
          ],
          "diverging": [
            [0, "#8e0152"],
            [0.1, "#c51b7d"],
            [0.2, "#de77ae"],
            [0.3, "#f1b6da"],
            [0.4, "#fde0ef"],
            [0.5, "#f7f7f7"],
            [0.6, "#e6f5d0"],
            [0.7, "#b8e186"],
            [0.8, "#7fbc41"],
            [0.9, "#4d9221"],
            [1, "#276419"]
          ]
        },
        "xaxis": {
          "gridcolor": "white",
          "linecolor": "white",
          "ticks": "",
          "title": { "standoff": 15 },
          "zerolinecolor": "white",
          "automargin": true,
          "zerolinewidth": 2
        },
        "yaxis": {
          "gridcolor": "white",
          "linecolor": "white",
          "ticks": "",
          "title": { "standoff": 15 },
          "zerolinecolor": "white",
          "automargin": true,
          "zerolinewidth": 2
        },
        "scene": {
          "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          },
          "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          },
          "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white",
            "gridwidth": 2
          }
        },
        "shapedefaults": { "line": { "color": "#2a3f5f" } },
        "annotationdefaults": {
          "arrowcolor": "#2a3f5f",
          "arrowhead": 0,
          "arrowwidth": 1
        },
        "geo": {
          "bgcolor": "white",
          "landcolor": "#E5ECF6",
          "subunitcolor": "white",
          "showland": true,
          "showlakes": true,
          "lakecolor": "white"
        },
        "title": { "x": 0.05 },
        "mapbox": { "style": "light" }
      }
    },
    "title": { "font": { "size": 24 }, "text": "", "x": 0.5, "y": 0.9 },
    "showlegend": false
  }
}

================
File: src/assets/weekly_emissions_chart.json
================
{"data":[{"hovertemplate":"Week=%{x}<br>Total Emissions Saved (kg)=%{y}<extra></extra>","legendgroup":"","line":{"color":"#00453D","dash":"solid","shape":"linear","width":4},"marker":{"symbol":"circle"},"mode":"lines","name":"","orientation":"v","showlegend":false,"x":["Week 31","Week 32","Week 33","Week 34","Week 35","Week 36","Week 37","Week 38","Week 39","Week 40","Week 41","Week 42","Week 43","Week 44","Week 45","Week 46","Week 47","Week 48"],"xaxis":"x","y":[12.57,28.29,22.44,29.21,27.63,21.81,24.189999999999998,23.77,19.119999999999997,21.36,22.55,21.279999999999998,14.709999999999999,22.099999999999998,28.63,37.65,19.49,20.259999999999998],"yaxis":"y","type":"scatter"}],"layout":{"template":{"data":{"barpolar":[{"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"white","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"#C8D4E3","linecolor":"#C8D4E3","minorgridcolor":"#C8D4E3","startlinecolor":"#2a3f5f"},"type":"carpet"}],"choropleth":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"choropleth"}],"contourcarpet":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"contourcarpet"}],"contour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"contour"}],"heatmapgl":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmapgl"}],"heatmap":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"heatmap"}],"histogram2dcontour":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2dcontour"}],"histogram2d":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"histogram2d"}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"mesh3d":[{"colorbar":{"outlinewidth":0,"ticks":""},"type":"mesh3d"}],"parcoords":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"parcoords"}],"pie":[{"automargin":true,"type":"pie"}],"scatter3d":[{"line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatter3d"}],"scattercarpet":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattercarpet"}],"scattergeo":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergeo"}],"scattergl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattergl"}],"scattermapbox":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scattermapbox"}],"scatterpolargl":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolargl"}],"scatterpolar":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterpolar"}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"scatterternary":[{"marker":{"colorbar":{"outlinewidth":0,"ticks":""}},"type":"scatterternary"}],"surface":[{"colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"type":"surface"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}]},"layout":{"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"autotypenumbers":"strict","coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]],"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]},"colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"geo":{"bgcolor":"white","lakecolor":"white","landcolor":"white","showlakes":true,"showland":true,"subunitcolor":"#C8D4E3"},"hoverlabel":{"align":"left"},"hovermode":"closest","mapbox":{"style":"light"},"paper_bgcolor":"white","plot_bgcolor":"white","polar":{"angularaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""},"bgcolor":"white","radialaxis":{"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":""}},"scene":{"xaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"yaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"},"zaxis":{"backgroundcolor":"white","gridcolor":"#DFE8F3","gridwidth":2,"linecolor":"#EBF0F8","showbackground":true,"ticks":"","zerolinecolor":"#EBF0F8"}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"ternary":{"aaxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"baxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""},"bgcolor":"white","caxis":{"gridcolor":"#DFE8F3","linecolor":"#A2B1C6","ticks":""}},"title":{"x":0.05},"xaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2},"yaxis":{"automargin":true,"gridcolor":"#EBF0F8","linecolor":"#EBF0F8","ticks":"","title":{"standoff":15},"zerolinecolor":"#EBF0F8","zerolinewidth":2}}},"xaxis":{"anchor":"y","domain":[0.0,1.0],"title":{"text":""},"showgrid":false,"tickangle":45},"yaxis":{"anchor":"x","domain":[0.0,1.0],"title":{"text":"Total Emissions Saved (kg)"},"showgrid":false},"legend":{"tracegroupgap":0},"title":{"text":"Weekly Emissions Saved","x":0.5},"plot_bgcolor":"white","paper_bgcolor":"white"}}

================
File: src/components/charts/ComparisonSection.tsx
================
"use client";
import React, { useState } from "react";
import PlotlyChart from "./PlotlyChart";

type Props = {
  teamPlotData: {
    data: any;
    layout: any;
  };
  depPlotData: {
    data: any;
    layout: any;
  };
  label1: string;
  label2: string;
};

function ComparisonSection({
  teamPlotData,
  depPlotData,
  label1,
  label2,
}: Props) {
  // Currently selected plot
  const [plot, setPlot] = useState("plot1");

  // Base class for a button
  const baseClass =
    "py-2 px-3 rounded-xl border shadow-md shadow-gray-600 hover:bg-green-600 transition-colors duration-700 ";
  return (
    <div>
      <section className="space-x-3 mb-5 flex justify-center">
        {/* Buttons for selecting currently active plot */}
        <button
          className={
            baseClass +
            `${
              plot === "plot1"
                ? "bg-black text-white font-semibold"
                : "bg-white border-2 border-black"
            }`
          }
          onClick={() => {
            setPlot("plot1");
          }}
        >
          {label1}
        </button>
        <button
          className={
            baseClass +
            `${
              plot === "plot2"
                ? "bg-black text-white font-semibold"
                : "bg-white border-2 border-black"
            }`
          }
          onClick={() => {
            setPlot("plot2");
          }}
        >
          {label2}
        </button>
      </section>
      {/* Plot with filled with the data based on selected plot */}
      <PlotlyChart data={plot === "plot1" ? teamPlotData : depPlotData} />
    </div>
  );
}

export default ComparisonSection;

================
File: src/components/charts/PlotlyChart.tsx
================
"use client";
import React from "react";
import dynamic from "next/dynamic";

// Dynamic import was necessary to make plotly work without throwing an error
const Plot = dynamic(() => import("react-plotly.js"), { ssr: false });

type Props = {
  data: {
    data: any;
    layout: any;
  };
};

function PlotlyChart({ data }: Props) {
  return <Plot data={data.data} layout={data.layout} />;
}

export default PlotlyChart;

================
File: src/components/forms/LoginForm.tsx
================
'use client'
import Link from 'next/link';
import React, { useState } from 'react';
import { signIn } from 'next-auth/react';
import { useRouter } from 'next/navigation';

const LoginForm = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();

    if (!email || !password) {
      setError('All fields are necessary.');
      return;
    }
    try {
      const res = await signIn('credentials', {
        email,
        password,
        redirect: false,
      });

      if (res?.error) {
        setError(res.error);
        console.error('Login error:', res.error);
        return;
      }
      if (res?.ok) {
        setEmail('');
        setPassword('');
        router.push('/');
      }
    } catch (error) {
      console.error("Error during the logining: ", error);
      setError('An unexpected error occurred.');
    }
  }

  return (
    <div className='grid place-items-center h-screen'>
      <div className='p-5 rounded-xl border border-slate-500 shadow-xl shadow-cyan-50'>
        <h1 className='text-2xl text-center font-bold my-4'>Login</h1>
        <form className='flex flex-col gap-3' onSubmit={handleSubmit}>
          <input type="text" placeholder='Email' value={email}
            className='w-80 bg-gray-200 h-10 placeholder:uppercase rounded-lg 
            placeholder:text-gray-400 placeholder:px-2 my-1'
            onChange={(e) => setEmail(e.target.value)} />
          <input type="password" placeholder='Password' value={password}
            className='w-80 bg-gray-200 h-10 placeholder:uppercase rounded-lg 
            placeholder:text-gray-400 placeholder:px-2 my-1'
            onChange={(e) => setPassword(e.target.value)} />
          <button className='text-gray-900 p-2 uppercase border border-slate-700 mt-1 rounded-xl 
          w-full bg-slate-300' type='submit'>Login</button>
          {error && (
            <div className='bg-red-500 text-white w-fit text-sm py-1 px-3 
            rounded-lg mt-2'>
              {error}
            </div>
          )}
          <Link href={'/register'} className='text-sm mt-3 text-cyan-600 text-right'>
            Don&apos;t have an account <span className='underline ml-2 uppercase text-cyan-400 underline-offset-4'>Register</span>
          </Link>
          <Link href={'/about'} className='text-sm mt-3 text-slate-700 text-right'>
            About this App <span className='underline ml-2 uppercase text-emerald-500 underline-offset-4'>Read more</span>
          </Link>
        </form>
      </div>
    </div>
  )
}

export default LoginForm;

================
File: src/components/forms/RegisterForm.tsx
================
import Link from 'next/link'
import { useRouter } from 'next/navigation';
import React, { useState } from 'react'


const RegisterForm = () => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [error, setError] = useState('');
    const router = useRouter()

    async function handleSubmit(e: React.FormEvent){
        e.preventDefault();

        if(!name || !email || !password){
            setError('All fields are necessary.');
            return;
        }
        
        try {
            const res = await fetch('/api/register', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name,
                    email,
                    password
                })
            })
            if(res.ok){
                setName('');
                setEmail('');
                setPassword('');
                router.push('/')
            } else {
                if (res.status === 400){
                    setError('Email address already registered.');
                    setName('');
                    setEmail('');
                    setPassword('')
                }
            }
        } catch (error) {
            console.log("Error during the registration: ", error)
        }
    }


  return (
    <div className='grid place-items-center h-screen'>
    <div className='p-5 rounded-xl border border-slate-600 shadow-md shadow-cyan-50'>
    <h1 className='text-2xl text-center font-bold my-4'>Register</h1>
    <form className='flex flex-col gap-3' onSubmit={handleSubmit}>
    <input type="text" placeholder='full name' value={name}
    className='w-80 bg-gray-200 h-10 placeholder:uppercase rounded-lg 
    placeholder:text-gray-400 placeholder:px-2 my-1'
    onChange={(e) => setName(e.target.value)}/>
    <input type="text" placeholder='Email' 
    className='w-80 bg-gray-200 h-10 placeholder:uppercase rounded-lg 
    placeholder:text-gray-400 placeholder:px-2 my-1' value={email}
    onChange={(e) => setEmail(e.target.value)}/>
    <input type="text" placeholder='Password' 
    className='w-80 bg-gray-200 h-10 placeholder:uppercase rounded-lg 
    placeholder:text-gray-400 placeholder:px-2 my-1' value={password}
    onChange={(e) => setPassword(e.target.value)}/>
    <button className='text-slate-700 p-2 uppercase border border-slate-600 mt-1 rounded-xl 
    w-full bg-gray-100'
    type='submit'>Register</button>
    {error && (
    <div className='bg-red-500 text-white w-fit text-sm py-1 px-3 
    rounded-lg mt-2'>
    {error}
    </div>
    )}
    <Link href={'/'} className='text-sm mt-3 text-cyan-600 text-right'>
    Already have an account <span className='underline ml-2 uppercase text-cyan-400 underline-offset-4'>Login</span>
    </Link>
    <Link href={'/about'} className='text-sm mt-3 text-slate-700 text-right'>
    About this App <span className='underline ml-2 uppercase text-emerald-500 underline-offset-4'>Read more</span>
    </Link>
    </form>
    </div>
    </div>
  )
}

export default RegisterForm

================
File: src/components/stationsMap/PickupStations.tsx
================
import React from "react";

type Props = {
  width: string;
  height: string;
};

function PickupStations({ width, height }: Props) {
  return (
    <div style={{ width: width, height: height }} className="mx-auto mt-3">
      <iframe
        src="/future_rides_map.html"
        title="Folium Map"
        style={{ width: "100%", height: "100%", border: "none" }}
      ></iframe>
    </div>
  );
}

export default PickupStations;

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed left-1/2 bottom-0 -translate-x-1/2 -translate-y-1/2 z-[100] flex max-h-screen w-full flex-col-reverse p-4 md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: src/components/ui/toaster.tsx
================
"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: src/components/Loader.tsx
================
import { BounceLoader } from 'react-spinners';

const Loader = () => {
  return (<BounceLoader color="#36d7b7" speedMultiplier={3} loading={true}/>)
}

export default Loader

================
File: src/components/NavBar.tsx
================
import Link from "next/link"
import Image from 'next/image'
// import { getServerSession } from "next-auth"
// import { SignInButton } from "./auth/SignInButton"
// import { SignOutButton } from "./auth/SignOutButton"

export default async function Navbar() {
//   const session = await getServerSession()

  return (
    <nav className="bg-white shadow-md">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          <div className="flex items-center space-x-8">
            <Link href="/" className="text-xl font-bold">
              <Image
                src="/logo.png"
                width={60}
                height={50}
                alt="HopIn Morris Logo"
              />
            </Link>
            <Link href="/" className="hover:text-blue-600">
              Home
            </Link>
            <Link href="/rides" className="hover:text-blue-600">
              Rides
            </Link>
            <Link href="/chat" className="hover:text-blue-600">
            Chat
            </Link>
            <Link href="/login" className="hover:text-blue-600">
            Login
            </Link>
            <Link href="/register" className="hover:text-blue-600">
            Signup
            </Link>
          </div>
        </div>
      </div>
    </nav>
  )
}

================
File: src/hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: src/lib/dbConnect.ts
================
import mongoose from "mongoose";
declare global {
  var mongoose: any; // This must be a `var` and not a `let / const`
}

let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function dbConnect() {
  const MONGODB_URI = process.env.MONGODB_URI!;

  if (!MONGODB_URI) {
    throw new Error(
      "Please define the MONGODB_URI environment variable inside .env.local"
    );
  }

  if (cached.conn) {
    return cached.conn;
  }
  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    };
    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
      return mongoose;
    });
  }
  try {
    cached.conn = await cached.promise;
  } catch (e) {
    cached.promise = null;
    throw e;
  }

  return cached.conn;
}

export default dbConnect;

================
File: src/lib/encryptedPassword.ts
================
import bcrypt from "bcrypt";

const encryptPassword = async (password: string): Promise<string> => {
    try {
        const saltRounds = 10;
        const salt = await bcrypt.genSalt(saltRounds);
        const hashedPassword = await bcrypt.hash(password, salt);
        return hashedPassword;
    } catch (error) {
        console.log('error :>> ', error);
        throw error; // Optionally rethrow the error to propagate it further
    }
}

const verifyPassword = async (rawPassword: string, hashedPassword: string): Promise<boolean> => {
    const isPasswordCorrect = await bcrypt.compare(rawPassword, hashedPassword);
    return isPasswordCorrect;
}

export { encryptPassword, verifyPassword };

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatDateString(dateString: string) {
    const options: Intl.DateTimeFormatOptions = {
      year: "numeric",
      month: "short",
      day: "numeric",
    };
  
    const date = new Date(dateString);
    const formattedDate = date.toLocaleDateString("en-US", options);
  
    const time = date.toLocaleTimeString([], {
      hour: "numeric",
      minute: "2-digit",
    });
  
    return `${formattedDate} at ${time}`;
  }
  
  export const multiFormatDateString = (timestamp: string = ""): string => {
    const timestampNum = Math.round(new Date(timestamp).getTime() / 1000);
    const date: Date = new Date(timestampNum * 1000);
    const now: Date = new Date();
  
    const diff: number = now.getTime() - date.getTime();
    const diffInSeconds: number = diff / 1000;
    const diffInMinutes: number = diffInSeconds / 60;
    const diffInHours: number = diffInMinutes / 60;
    const diffInDays: number = diffInHours / 24;
  
    switch (true) {
      case Math.floor(diffInDays) >= 30:
        return formatDateString(timestamp);
      case Math.floor(diffInDays) === 1:
        return `${Math.floor(diffInDays)} day ago`;
      case Math.floor(diffInDays) > 1 && diffInDays < 30:
        return `${Math.floor(diffInDays)} days ago`;
      case Math.floor(diffInHours) >= 1:
        return `${Math.floor(diffInHours)} hours ago`;
      case Math.floor(diffInMinutes) >= 1:
        return `${Math.floor(diffInMinutes)} minutes ago`;
      default:
        return "Just now";
    }
  };

================
File: src/lib/validation.ts
================
import * as z from "zod";

export const registerValidation = z.object({
    username: z.string().min(2, { message: 'too short'}),
    email: z.string().email(),
    password: z.string().min(7, { message: 'Password must be at least 7 characters'})
});

export const loginValidation = z.object({
    email: z.string().email(),
    password: z.string().min(7, { message: 'Password must be at least 7 characters'})
});

================
File: src/models/navigation.ts
================
import mongoose from "mongoose";

const locationSchema = new mongoose.Schema(
  {
    LocationName: {
      type: String,
      required: true,
    },
    Address: {
      type: String,
      required: true,
    },
    Latitude: {
      type: String,
      required: true,
    },
    Longtitude: {
      type: String,
      required: true,
    },
  },
  { 
    timestamps: true
  }
);

const Location = mongoose.models.Location || mongoose.model('Location', locationSchema);

export default Location;

================
File: src/models/ride.ts
================
import mongoose from 'mongoose';

const rideSchema = new mongoose.Schema(
  {
    driver: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
    startLocation: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Location',
    },
    endLocation: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Location',
    },
    departureTime: {
      type: mongoose.Schema.Types.Date,
    },
    seats: {
      type: Number,
      required: true,
    },
    passengers: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
  },
  { timestamps: true }
);

const Ride = mongoose.models.Ride || mongoose.model('Ride', rideSchema);

export default Ride;

================
File: src/models/user.ts
================
import mongoose from 'mongoose';

const UserSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
    },
    email: {
      type: String,
      required: true,
    },
    password: {
      type: String,
      required: true,
    },
    role: {
      type: String,
      required: true,
    },
    carBrand: {
      type: String,
    },
    carLicencePlate: {
      type: String,
    },
    rides: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Ride' }],
  },
  { timestamps: true }
);

const User = mongoose.models.User || mongoose.model('User', UserSchema);

export default User;

================
File: src/types/index.ts
================
import mongoose from "mongoose";

export interface IUser extends Document {
  name: string;
  email: string;
  password: string;
  role: string;
  carBrand?: string;
  carLicencePlate?: string;
  rides: mongoose.Types.ObjectId[];
  createdAt: Date;
  updatedAt: Date;
}

export interface ILocation extends Document {
  LocationName: string;
  Address: string;
  Latitude: string;
  Longtitude: string;
  createdAt: Date;
  updatedAt: Date;
}

export interface IRide extends Document {
  driver: mongoose.Types.ObjectId | IUser;
  startLocation: mongoose.Types.ObjectId | ILocation;
  endLocation: mongoose.Types.ObjectId | ILocation;
  departureTime: Date;
  seats: number;
  passengers: mongoose.Types.ObjectId[] | IUser[];
  createdAt: Date;
  updatedAt: Date;
}

export interface SimpleLocation {
  _id: string;
  LocationName: string;
  Address: string;
}

export interface SimpleUser {
  _id: string;
  name?: string;
  email: string;
}

export interface RideWithLocations {
  _id: string;
  startLocation: SimpleLocation;
  endLocation: SimpleLocation;
  departureTime: Date;
  seats: number;
  driver: {
    _id: string;
    name?: string;
    email: string;
  };
  passengers: Array<{
    _id: string;
    name?: string;
    email: string;
  }>;
}

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"],
  "rules": {
    "@typescript-eslint/no-unused-vars": "off"
  }
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "hopinmorris",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@prisma/client": "^5.22.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.2",
    "bcrypt": "^5.1.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.461.0",
    "mongodb": "^6.11.0",
    "mongoose": "^8.8.3",
    "next": "15.0.3",
    "next-auth": "^4.24.10",
    "openai": "^4.73.1",
    "plotly.js": "^2.35.2",
    "prisma": "^5.22.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-plotly.js": "^2.6.0",
    "react-spinners": "^0.14.1",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/bcrypt": "^5.0.2",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@types/react-plotly.js": "^2.6.3",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";
import tailwindcssAnimate from "tailwindcss-animate";

export default {
    darkMode: ["class"],
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: '10px',
  			md: '5px',
  			sm: '2px'
  		}
  	}
  },
plugins: [tailwindcssAnimate],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "baseUrl": "./src",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
        "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
